<?xml version="1.0" encoding="ASCII"?>
<pptp:PuppetDistribution xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:pptp="http://www.cloudsmith.org/geppetto/1.0.0/PPTP" description="Puppet Distribution" version="2.6.4_0" label="puppet 2.6.4_0">
  <functions documentation="Determine whether a given&#xA;  type is defined, either as a native type or a defined type, or whether a class is defined.&#xA;  This is useful for checking whether a class is defined and only including it if it is.&#xA;  This function can also test whether a resource has been defined, using resource references&#xA;  (e.g., `if defined(File['/tmp/myfile']) { ... }`).  This function is unfortunately&#xA;  dependent on the parse order of the configuration when testing whether a resource is defined." name="defined" rValue="true"/>
  <functions documentation="This is a parser function to read data from external files, this version&#xA;uses CSV files but the concept can easily be adjust for databases, yaml&#xA;or any other queryable data source.&#xA;&#xA;The object of this is to make it obvious when it's being used, rather than&#xA;magically loading data in when an module is loaded I prefer to look at the code&#xA;and see statements like:&#xA;&#xA;    $snmp_contact = extlookup(&quot;snmp_contact&quot;)&#xA;&#xA;The above snippet will load the snmp_contact value from CSV files, this in its&#xA;own is useful but a common construct in puppet manifests is something like this:&#xA;&#xA;    case $domain {&#xA;      &quot;myclient.com&quot;: { $snmp_contact = &quot;John Doe &lt;john@myclient.com>&quot; }&#xA;      default:        { $snmp_contact = &quot;My Support &lt;support@my.com>&quot; }&#xA;    }&#xA;&#xA;Over time there will be a lot of this kind of thing spread all over your manifests&#xA;and adding an additional client involves grepping through manifests to find all the&#xA;places where you have constructs like this.&#xA;&#xA;This is a data problem and shouldn't be handled in code, a using this function you&#xA;can do just that.&#xA;&#xA;First you configure it in site.pp:&#xA;&#xA;    $extlookup_datadir = &quot;/etc/puppet/manifests/extdata&quot;&#xA;    $extlookup_precedence = [&quot;%{fqdn}&quot;, &quot;domain_%{domain}&quot;, &quot;common&quot;]&#xA;&#xA;The array tells the code how to resolve values, first it will try to find it in&#xA;web1.myclient.com.csv then in domain_myclient.com.csv and finally in common.csv&#xA;&#xA;Now create the following data files in /etc/puppet/manifests/extdata:&#xA;&#xA;    domain_myclient.com.csv:&#xA;      snmp_contact,John Doe &lt;john@myclient.com>&#xA;      root_contact,support@%{domain}&#xA;      client_trusted_ips,192.168.1.130,192.168.10.0/24&#xA;&#xA;    common.csv:&#xA;      snmp_contact,My Support &lt;support@my.com>&#xA;      root_contact,support@my.com&#xA;&#xA;Now you can replace the case statement with the simple single line to achieve&#xA;the exact same outcome:&#xA;&#xA;   $snmp_contact = extlookup(&quot;snmp_contact&quot;)&#xA;&#xA;The above code shows some other features, you can use any fact or variable that&#xA;is in scope by simply using %{varname} in your data files, you can return arrays&#xA;by just having multiple values in the csv after the initial variable name.&#xA;&#xA;In the event that a variable is nowhere to be found a critical error will be raised&#xA;that will prevent your manifest from compiling, this is to avoid accidentally putting&#xA;in empty values etc.  You can however specify a default value:&#xA;&#xA;   $ntp_servers = extlookup(&quot;ntp_servers&quot;, &quot;1.${country}.pool.ntp.org&quot;)&#xA;&#xA;In this case it will default to &quot;1.${country}.pool.ntp.org&quot; if nothing is defined in&#xA;any data file.&#xA;&#xA;You can also specify an additional data file to search first before any others at use&#xA;time, for example:&#xA;&#xA;    $version = extlookup(&quot;rsyslog_version&quot;, &quot;present&quot;, &quot;packages&quot;)&#xA;    package{&quot;rsyslog&quot;: ensure => $version }&#xA;&#xA;This will look for a version configured in packages.csv and then in the rest as configured&#xA;by $extlookup_precedence if it's not found anywhere it will default to `present`, this kind&#xA;of use case makes puppet a lot nicer for managing large amounts of packages since you do not&#xA;need to edit a load of manifests to do simple things like adjust a desired version number.&#xA;&#xA;Precedence values can have variables embedded in them in the form %{fqdn}, you could for example do:&#xA;&#xA;    $extlookup_precedence = [&quot;hosts/%{fqdn}&quot;, &quot;common&quot;]&#xA;&#xA;This will result in /path/to/extdata/hosts/your.box.com.csv being searched.&#xA;&#xA;This is for back compatibility to interpolate variables with %. % interpolation is a workaround for a problem that has been fixed: Puppet variable interpolation at top scope used to only happen on each run." name="extlookup" rValue="true"/>
  <functions documentation="Fail with a parse error." name="fail"/>
  <functions documentation="Return the contents of a file.  Multiple files&#xA;    can be passed, and the first file that exists will be read in." name="file" rValue="true"/>
  <functions documentation="Generates random numbers based on the node's fqdn. The first argument&#xA;  sets the range.  Additional (optional) arguments may be used to further&#xA;  distinguish the seed." name="fqdn_rand" rValue="true"/>
  <functions documentation="Calls an external command on the Puppet master and returns&#xA;    the results of the command.  Any arguments are passed to the external command as&#xA;    arguments.  If the generator does not exit with return code of 0,&#xA;    the generator is considered to have failed and a parse error is&#xA;    thrown.  Generators can only have file separators, alphanumerics, dashes,&#xA;    and periods in them.  This function will attempt to protect you from&#xA;    malicious generator calls (e.g., those with '..' in them), but it can&#xA;    never be entirely safe.  No subshell is used to execute&#xA;    generators, so all shell metacharacters are passed directly to&#xA;    the generator." name="generate" rValue="true"/>
  <functions documentation="Evaluate one or more classes." name="include"/>
  <functions documentation="Evaluate a template string and return its value.  See &#xA;  [the templating docs](http://docs.puppetlabs.com/guides/templating.html) for &#xA;  more information.  Note that if multiple template strings are specified, their &#xA;  output is all concatenated and returned as the output of the function." name="inline_template" rValue="true"/>
  <functions documentation="Returns a MD5 hash value from a provided string." name="md5" rValue="true"/>
  <functions documentation="Make a virtual object real.  This is useful&#xA;    when you want to know the name of the virtual object and don't want to&#xA;    bother with a full collection.  It is slightly faster than a collection,&#xA;    and, of course, is a bit shorter.  You must pass the object using a&#xA;    reference; e.g.: `realize User[luke]`." name="realize"/>
  <functions documentation="&#xA;  Perform regexp replacement on a string or array of strings.&#xA;&#xA;* *Parameters* (in order):&#xA;&#xA;    _target_  The string or array of strings to operate on.  If an array, the replacement will be performed on each of the elements in the array, and the return value will be an array.&#xA;&#xA;    _regexp_  The regular expression matching the target string.  If you want it anchored at the start and or end of the string, you must do that with ^ and $ yourself.&#xA;&#xA;    _replacement_  Replacement string. Can contain back references to what was matched using \0, \1, and so on.&#xA;&#xA;    _flags_  Optional. String of single letter flags for how the regexp is interpreted:&#xA;&#xA;        - *E*         Extended regexps&#xA;        - *I*         Ignore case in regexps&#xA;        - *M*         Multiline regexps&#xA;        - *G*         Global replacement; all occurrences of the regexp in each target string will be replaced.  Without this, only the first occurrence will be replaced.&#xA;&#xA;    _lang_  Optional.  How to handle multibyte characters.  A single-character string with the following values:&#xA;&#xA;        - *N*         None&#xA;        - *E*         EUC&#xA;        - *S*         SJIS&#xA;        - *U*         UTF-8&#xA;&#xA;* *Examples*&#xA;&#xA;Get the third octet from the node's IP address:&#xA;&#xA;    $i3 = regsubst($ipaddress,'^([0-9]+)[.]([0-9]+)[.]([0-9]+)[.]([0-9]+)$','\3')&#xA;&#xA;Put angle brackets around each octet in the node's IP address:&#xA;&#xA;    $x = regsubst($ipaddress, '([0-9]+)', '&lt;\1>', 'G')&#xA;" name="regsubst" rValue="true"/>
  <functions documentation="Evaluate one or more classes,  adding the required class as a dependency.&#xA;&#xA;The relationship metaparameters work well for specifying relationships&#xA;between individual resources, but they can be clumsy for specifying&#xA;relationships between classes.  This function is a superset of the&#xA;'include' function, adding a class relationship so that the requiring&#xA;class depends on the required class.&#xA;&#xA;Warning: using require in place of include can lead to unwanted dependency cycles.&#xA;&#xA;For instance the following manifest, with 'require' instead of 'include' would produce a nasty dependence cycle, because notify imposes a before between File[/foo] and Service[foo]:&#xA;&#xA;    class myservice {&#xA;      service { foo: ensure => running }&#xA;    }&#xA;&#xA;    class otherstuff {&#xA;      include myservice&#xA;      file { '/foo': notify => Service[foo] }&#xA;    }&#xA;&#xA;Note that this function only works with clients 0.25 and later, and it will&#xA;fail if used with earlier clients.&#xA;&#xA;" name="require"/>
  <functions documentation="Add another namespace for this class to search.&#xA;    This allows you to create classes with sets of definitions and add&#xA;    those classes to another class's search path." name="search"/>
  <functions documentation="Returns a SHA1 hash value from a provided string." name="sha1" rValue="true"/>
  <functions documentation="    Quote and concatenate arguments for use in Bourne shell.&#xA;&#xA;    Each argument is quoted separately, and then all are concatenated&#xA;    with spaces.  If an argument is an array, the elements of that&#xA;    array is interpolated within the rest of the arguments; this makes&#xA;    it possible to have an array of arguments and pass that array to&#xA;    shellquote instead of having to specify each argument&#xA;    individually in the call.&#xA;    " name="shellquote" rValue="true"/>
  <functions documentation="Split a string variable into an array using the specified split regexp.&#xA;&#xA;  Usage:&#xA;&#xA;    $string     = 'v1.v2:v3.v4'&#xA;    $array_var1 = split($string, ':')&#xA;    $array_var2 = split($string, '[.]')&#xA;    $array_var3 = split($string, '[.:]')&#xA;&#xA;$array_var1 now holds the result ['v1.v2', 'v3.v4'],&#xA;while $array_var2 holds ['v1', 'v2:v3', 'v4'], and&#xA;$array_var3 holds ['v1', 'v2', 'v3', 'v4'].&#xA;&#xA;Note that in the second example, we split on a string that contains&#xA;a regexp meta-character (.), and that needs protection.  A simple&#xA;way to do that for a single character is to enclose it in square&#xA;brackets." name="split" rValue="true"/>
  <functions documentation="Perform printf-style formatting of text.&#xA;&#xA;      The first parameter is format string describing how the rest of the parameters should be formatted.  See the documentation for the `Kernel::sprintf` function in Ruby for all the details." name="sprintf" rValue="true"/>
  <functions documentation="Add the specified tags to the containing class&#xA;  or definition.  All contained objects will then acquire that tag, also.&#xA;  " name="tag"/>
  <functions documentation="A boolean function that&#xA;  tells you whether the current container is tagged with the specified tags.&#xA;  The tags are ANDed, so that all of the specified tags must be included for&#xA;  the function to return true." name="tagged" rValue="true"/>
  <functions documentation="Evaluate a template and return its value.  See&#xA;  [the templating docs](http://docs.puppetlabs.com/guides/templating.html) for &#xA;  more information.&#xA;  &#xA;  Note that if multiple templates are specified, their output is all&#xA;  concatenated and returned as the output of the function." name="template" rValue="true"/>
  <functions documentation="Compares two versions&#xA;&#xA;Prototype:&#xA;&#xA;    $result = versioncmp(a, b)&#xA;&#xA;Where a and b are arbitrary version strings&#xA;&#xA;This functions returns a number:&#xA;&#xA;* Greater than 0 if version a is greater than version b&#xA;* Equal to 0 if both version are equals&#xA;* Less than 0 if version a is less than version b&#xA;&#xA;Example:&#xA;&#xA;    if versioncmp('2.6-1', '2.4.5') > 0 {&#xA;        notice('2.6-1 is > than 2.4.5')&#xA;    }&#xA;&#xA;" name="versioncmp" rValue="true"/>
  <functions documentation="Log a message on the server at level debug." name="debug"/>
  <functions documentation="Log a message on the server at level info." name="info"/>
  <functions documentation="Log a message on the server at level notice." name="notice"/>
  <functions documentation="Log a message on the server at level warning." name="warning"/>
  <functions documentation="Log a message on the server at level err." name="err"/>
  <functions documentation="Log a message on the server at level alert." name="alert"/>
  <functions documentation="Log a message on the server at level emerg." name="emerg"/>
  <functions documentation="Log a message on the server at level crit." name="crit"/>
  <types name="augeas" documentation="Apply the changes (single or array of changes) to the filesystem&#xA;    via the augeas tool.&#xA;&#xA;    Requires:&#xA;&#xA;    - augeas to be installed (http://www.augeas.net)&#xA;    - ruby-augeas bindings&#xA;&#xA;    Sample usage with a string:&#xA;&#xA;        augeas{&quot;test1&quot; :&#xA;          context => &quot;/files/etc/sysconfig/firstboot&quot;,&#xA;          changes => &quot;set RUN_FIRSTBOOT YES&quot;,&#xA;          onlyif  => &quot;match other_value size > 0&quot;,&#xA;        }&#xA;&#xA;    Sample usage with an array and custom lenses:&#xA;&#xA;        augeas{&quot;jboss_conf&quot;:&#xA;          context => &quot;/files&quot;,&#xA;          changes => [&#xA;            &quot;set /etc/jbossas/jbossas.conf/JBOSS_IP $ipaddress&quot;,&#xA;            &quot;set /etc/jbossas/jbossas.conf/JAVA_HOME /usr&quot;&#xA;          ],&#xA;          load_path => &quot;$/usr/share/jbossas/lenses&quot;,&#xA;        }&#xA;&#xA;    ">
    <properties name="returns" documentation="The expected return code from the augeas command. Should not be set"/>
    <parameters name="incl" documentation="Load only a specific file, e.g. `/etc/hosts`.  When this parameter is set, you must also set the lens parameter to indicate which lens to use."/>
    <parameters name="type_check" documentation="Set to true if augeas should perform typechecking. Optional, defaults to false"/>
    <parameters name="load_path" documentation="Optional colon separated list of directories; these directories are searched for schema definitions"/>
    <parameters name="root" documentation="A file system path; all files loaded by Augeas are loaded underneath ROOT"/>
    <parameters name="onlyif" documentation="Optional augeas command and comparisons to control the execution of this type.&#xA;      Supported onlyif syntax:&#xA;&#xA;          get [AUGEAS_PATH] [COMPARATOR] [STRING]&#xA;          match [MATCH_PATH] size [COMPARATOR] [INT]&#xA;          match [MATCH_PATH] include [STRING]&#xA;          match [MATCH_PATH] not_include [STRING]&#xA;          match [MATCH_PATH] == [AN_ARRAY]&#xA;          match [MATCH_PATH] != [AN_ARRAY]&#xA;&#xA;      where:&#xA;&#xA;          AUGEAS_PATH is a valid path scoped by the context&#xA;          MATCH_PATH is a valid match synatx scoped by the context&#xA;          COMPARATOR is in the set [> >= != == &lt;= &lt;]&#xA;          STRING is a string&#xA;          INT is a number&#xA;          AN_ARRAY is in the form ['a string', 'another']"/>
    <parameters name="name" documentation="The name of this task. Used for uniqueness" namevar="true"/>
    <parameters name="context" documentation="Optional context path. This value is prepended to the paths of all changes if the path is relative. If INCL is set, defaults to '/files' + INCL, otherwise the empty string"/>
    <parameters name="force" documentation="Optional command to force the augeas type to execute even if it thinks changes&#xA;    will not be made. This does not overide the only setting. If onlyif is set, then the&#xA;    foce setting will not override that result"/>
    <parameters name="lens" documentation="Use a specific lens, e.g. `Hosts.lns`. When this parameter is set, you must also set the incl parameter to indicate which file to load. Only that file will be loaded, which greatly speeds up execution of the type"/>
    <parameters name="changes" documentation="The changes which should be applied to the filesystem. This&#xA;    can be either a string which contains a command or an array of commands.&#xA;    Commands supported are:&#xA;&#xA;        set [PATH] [VALUE]     Sets the value VALUE at loction PATH&#xA;        rm [PATH]              Removes the node at location PATH&#xA;        remove [PATH]          Synonym for rm&#xA;        clear [PATH]           Keeps the node at PATH, but removes the value.&#xA;        ins [LABEL] [WHERE] [PATH]    Inserts an empty node LABEL either [WHERE={before|after}] PATH.&#xA;        insert [LABEL] [WHERE] [PATH] Synonym for ins&#xA;&#xA;    If the parameter 'context' is set that value is prepended to PATH"/>
  </types>
  <types name="component" documentation="">
    <parameters name="name" documentation="The name of the component.  Generally optional." namevar="true"/>
  </types>
  <types name="computer" documentation="Computer object management using DirectoryService&#xA;    on OS X.&#xA;&#xA;    Note that these are distinctly different kinds of objects to 'hosts',&#xA;    as they require a MAC address and can have all sorts of policy attached to&#xA;    them.&#xA;&#xA;    This provider only manages Computer objects in the local directory service&#xA;    domain, not in remote directories.&#xA;&#xA;    If you wish to manage `/etc/hosts` file on Mac OS X, then simply use the host&#xA;    type as per other platforms.&#xA;&#xA;    This type primarily exists to create localhost Computer objects that MCX&#xA;    policy can then be attached to.">
    <properties name="ip_address" documentation="The IP Address of the Computer object."/>
    <properties name="en_address" documentation="The MAC address of the primary network interface. Must match en0."/>
    <properties name="ensure" documentation="Control the existences of this computer record. Set this attribute to&#xA;      `present` to ensure the computer record exists.  Set it to `absent`&#xA;      to delete any computer records with this name"/>
    <parameters name="name" documentation="The authoritative 'short' name of the computer record." namevar="true"/>
    <parameters name="realname" documentation="The 'long' name of the computer record."/>
  </types>
  <types name="cron" documentation="Installs and manages cron jobs.  All fields except the command&#xA;    and the user are optional, although specifying no periodic&#xA;    fields would result in the command being executed every&#xA;    minute.  While the name of the cron job is not part of the actual&#xA;    job, it is used by Puppet to store and retrieve it.&#xA;&#xA;    If you specify a cron job that matches an existing job in every way&#xA;    except name, then the jobs will be considered equivalent and the&#xA;    new name will be permanently associated with that job.  Once this&#xA;    association is made and synced to disk, you can then manage the job&#xA;    normally (e.g., change the schedule of the job).&#xA;&#xA;    Example:&#xA;&#xA;        cron { logrotate:&#xA;          command => &quot;/usr/sbin/logrotate&quot;,&#xA;          user => root,&#xA;          hour => 2,&#xA;          minute => 0&#xA;        }&#xA;&#xA;    Note that all cron values can be specified as an array of values:&#xA;&#xA;        cron { logrotate:&#xA;          command => &quot;/usr/sbin/logrotate&quot;,&#xA;          user => root,&#xA;          hour => [2, 4]&#xA;        }&#xA;&#xA;    Or using ranges, or the step syntax `*/2` (although there's no guarantee that&#xA;    your `cron` daemon supports it):&#xA;&#xA;        cron { logrotate:&#xA;          command => &quot;/usr/sbin/logrotate&quot;,&#xA;          user => root,&#xA;          hour => ['2-4'],&#xA;          minute => '*/10'&#xA;        }&#xA;    ">
    <properties name="minute" documentation="The minute at which to run the cron job.&#xA;      Optional; if specified, must be between 0 and 59, inclusive."/>
    <properties name="environment" documentation="Any environment settings associated with this cron job.  They&#xA;      will be stored between the header and the job in the crontab.  There&#xA;      can be no guarantees that other, earlier settings will not also&#xA;      affect a given cron job.&#xA;&#xA;&#xA;      Also, Puppet cannot automatically determine whether an existing,&#xA;      unmanaged environment setting is associated with a given cron&#xA;      job.  If you already have cron jobs with environment settings,&#xA;      then Puppet will keep those settings in the same place in the file,&#xA;      but will not associate them with a specific job.&#xA;&#xA;      Settings should be specified exactly as they should appear in&#xA;      the crontab, e.g., `PATH=/bin:/usr/bin:/usr/sbin`."/>
    <properties name="weekday" documentation="The weekday on which to run the command.&#xA;      Optional; if specified, must be between 0 and 7, inclusive, with&#xA;      0 (or 7) being Sunday, or must be the name of the day (e.g., Tuesday)."/>
    <properties name="monthday" documentation="The day of the month on which to run the&#xA;      command.  Optional; if specified, must be between 1 and 31."/>
    <properties name="target" documentation="Where the cron job should be stored.  For crontab-style&#xA;      entries this is the same as the user and defaults that way.&#xA;      Other providers default accordingly."/>
    <properties name="month" documentation="The month of the year.  Optional; if specified&#xA;      must be between 1 and 12 or the month name (e.g., December)."/>
    <properties name="command" documentation="The command to execute in the cron job.  The environment&#xA;      provided to the command varies by local system rules, and it is&#xA;      best to always provide a fully qualified command.  The user's&#xA;      profile is not sourced when the command is run, so if the&#xA;      user's environment is desired it should be sourced manually.&#xA;&#xA;      All cron parameters support `absent` as a value; this will&#xA;      remove any existing values for that field."/>
    <properties name="special" documentation="Special schedules"/>
    <properties name="hour" documentation="The hour at which to run the cron job. Optional;&#xA;      if specified, must be between 0 and 23, inclusive."/>
    <properties name="user" documentation="The user to run the command as.  This user must&#xA;      be allowed to run cron jobs, which is not currently checked by&#xA;      Puppet.&#xA;&#xA;      The user defaults to whomever Puppet is running as."/>
    <parameters name="name" documentation="The symbolic name of the cron job.  This name&#xA;      is used for human reference only and is generated automatically&#xA;      for cron jobs found on the system.  This generally won't&#xA;      matter, as Puppet will do its best to match existing cron jobs&#xA;      against specified jobs (and Puppet adds a comment to cron jobs it adds), but it is at least possible that converting from&#xA;      unmanaged jobs to managed jobs might require manual&#xA;      intervention." namevar="true"/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="exec" documentation="Executes external commands.  It is critical that all commands&#xA;      executed using this mechanism can be run multiple times without&#xA;      harm, i.e., they are *idempotent*.  One useful way to create idempotent&#xA;      commands is to use the checks like `creates` to avoid running the&#xA;      command unless some condition is met.&#xA;&#xA;      Note also that you can restrict an `exec` to only run when it receives&#xA;      events by using the `refreshonly` parameter; this is a useful way to&#xA;      have your configuration respond to events with arbitrary commands.&#xA;&#xA;      It is worth noting that `exec` is special, in that it is not&#xA;      currently considered an error to have multiple `exec` instances&#xA;      with the same name.  This was done purely because it had to be this&#xA;      way in order to get certain functionality, but it complicates things.&#xA;      In particular, you will not be able to use `exec` instances that&#xA;      share their commands with other instances as a dependency, since&#xA;      Puppet has no way of knowing which instance you mean.&#xA;&#xA;      For example:&#xA;&#xA;          # defined in the production class&#xA;          exec { &quot;make&quot;:&#xA;            cwd => &quot;/prod/build/dir&quot;,&#xA;            path => &quot;/usr/bin:/usr/sbin:/bin&quot;&#xA;          }&#xA;&#xA;          . etc. .&#xA;&#xA;          # defined in the test class&#xA;          exec { &quot;make&quot;:&#xA;            cwd => &quot;/test/build/dir&quot;,&#xA;            path => &quot;/usr/bin:/usr/sbin:/bin&quot;&#xA;          }&#xA;&#xA;      Any other type would throw an error, complaining that you had&#xA;      the same instance being managed in multiple places, but these are&#xA;      obviously different images, so `exec` had to be treated specially.&#xA;&#xA;      It is recommended to avoid duplicate names whenever possible.&#xA;&#xA;      Note that if an `exec` receives an event from another resource,&#xA;      it will get executed again (or execute the command specified in `refresh`, if there is one).&#xA;&#xA;      There is a strong tendency to use `exec` to do whatever work Puppet&#xA;      can't already do; while this is obviously acceptable (and unavoidable)&#xA;      in the short term, it is highly recommended to migrate work from `exec`&#xA;      to native Puppet types as quickly as possible.  If you find that&#xA;      you are doing a lot of work with `exec`, please at least notify&#xA;      us at Puppet Labs what you are doing, and hopefully we can work with&#xA;      you to get a native resource type for the work you are doing.">
    <properties name="returns" documentation="The expected return code(s).  An error will be returned if the&#xA;        executed command returns something else.  Defaults to 0. Can be&#xA;        specified as an array of acceptable return codes or a single value."/>
    <parameters name="logoutput" documentation="Whether to log output.  Defaults to logging output at the&#xA;        loglevel for the `exec` resource. Use *on_failure* to only&#xA;        log the output when the command reports an error.  Values are&#xA;        **true**, *false*, *on_failure*, and any legal log level."/>
    <parameters name="onlyif" documentation="If this parameter is set, then this `exec` will only run if&#xA;        the command returns 0.  For example:&#xA;&#xA;            exec { &quot;logrotate&quot;:&#xA;              path => &quot;/usr/bin:/usr/sbin:/bin&quot;,&#xA;              onlyif => &quot;test `du /var/log/messages | cut -f1` -gt 100000&quot;&#xA;            }&#xA;&#xA;        This would run `logrotate` only if that test returned true.&#xA;&#xA;        Note that this command follows the same rules as the main command,&#xA;        which is to say that it must be fully qualified if the path is not set.&#xA;&#xA;        Also note that onlyif can take an array as its value, e.g.:&#xA;&#xA;            onlyif => [&quot;test -f /tmp/file1&quot;, &quot;test -f /tmp/file2&quot;]&#xA;&#xA;        This will only run the exec if /all/ conditions in the array return true.&#xA;        "/>
    <parameters name="cwd" documentation="The directory from which to run the command.  If&#xA;        this directory does not exist, the command will fail."/>
    <parameters name="creates" documentation="A file that this command creates.  If this&#xA;        parameter is provided, then the command will only be run&#xA;        if the specified file does not exist:&#xA;&#xA;            exec { &quot;tar xf /my/tar/file.tar&quot;:&#xA;              cwd => &quot;/var/tmp&quot;,&#xA;              creates => &quot;/var/tmp/myfile&quot;,&#xA;              path => [&quot;/usr/bin&quot;, &quot;/usr/sbin&quot;]&#xA;            }&#xA;&#xA;        "/>
    <parameters name="env" documentation="This parameter is deprecated. Use 'environment' instead."/>
    <parameters name="refreshonly" documentation="The command should only be run as a&#xA;        refresh mechanism for when a dependent object is changed.  It only&#xA;        makes sense to use this option when this command depends on some&#xA;        other object; it is useful for triggering an action:&#xA;&#xA;            # Pull down the main aliases file&#xA;            file { &quot;/etc/aliases&quot;:&#xA;              source => &quot;puppet://server/module/aliases&quot;&#xA;            }  &#xA;&#xA;            # Rebuild the database, but only when the file changes&#xA;            exec { newaliases:&#xA;              path => [&quot;/usr/bin&quot;, &quot;/usr/sbin&quot;],&#xA;              subscribe => File[&quot;/etc/aliases&quot;],&#xA;              refreshonly => true&#xA;            }&#xA;&#xA;        Note that only `subscribe` and `notify` can trigger actions, not `require`,&#xA;        so it only makes sense to use `refreshonly` with `subscribe` or `notify`."/>
    <parameters name="environment" documentation="Any additional environment variables you want to set for a&#xA;        command.  Note that if you use this to set PATH, it will override&#xA;        the `path` attribute.  Multiple environment variables should be&#xA;        specified as an array."/>
    <parameters name="unless" documentation="If this parameter is set, then this `exec` will run unless&#xA;        the command returns 0.  For example:&#xA;&#xA;            exec { &quot;/bin/echo root >> /usr/lib/cron/cron.allow&quot;:&#xA;              path => &quot;/usr/bin:/usr/sbin:/bin&quot;,&#xA;              unless => &quot;grep root /usr/lib/cron/cron.allow 2>/dev/null&quot;&#xA;            }&#xA;&#xA;        This would add `root` to the cron.allow file (on Solaris) unless&#xA;        `grep` determines it's already there.&#xA;&#xA;        Note that this command follows the same rules as the main command,&#xA;        which is to say that it must be fully qualified if the path is not set.&#xA;        "/>
    <parameters name="try_sleep" documentation="The time to sleep in seconds between 'tries'."/>
    <parameters name="command" documentation="The actual command to execute.  Must either be fully qualified&#xA;        or a search path for the command must be provided.  If the command&#xA;        succeeds, any output produced will be logged at the instance's&#xA;        normal log level (usually `notice`), but if the command fails&#xA;        (meaning its return code does not match the specified code) then&#xA;        any output is logged at the `err` log level." namevar="true"/>
    <parameters name="path" documentation="The search path used for command execution.&#xA;        Commands must be fully qualified if no path is specified.  Paths&#xA;        can be specified as an array or as a colon-separated list."/>
    <parameters name="tries" documentation="The number of times execution of the command should be tried.&#xA;        Defaults to '1'. This many attempts will be made to execute&#xA;        the command until an acceptable return code is returned.&#xA;        Note that the timeout paramater applies to each try rather than&#xA;        to the complete set of tries."/>
    <parameters name="group" documentation="The group to run the command as.  This seems to work quite&#xA;        haphazardly on different platforms -- it is a platform issue&#xA;        not a Ruby or Puppet one, since the same variety exists when&#xA;        running commnands as different users in the shell."/>
    <parameters name="user" documentation="The user to run the command as.  Note that if you&#xA;        use this then any error output is not currently captured.  This&#xA;        is because of a bug within Ruby.  If you are using Puppet to&#xA;        create this user, the exec will automatically require the user,&#xA;        as long as it is specified by name."/>
    <parameters name="refresh" documentation="How to refresh this command.  By default, the exec is just&#xA;        called again when it receives an event from another resource,&#xA;        but this parameter allows you to define a different command&#xA;        for refreshing."/>
    <parameters name="timeout" documentation="The maximum time the command should take.  If the command takes&#xA;        longer than the timeout, the command is considered to have failed&#xA;        and will be stopped.  Use any negative number to disable the timeout.&#xA;        The time is specified in seconds."/>
  </types>
  <types name="file" documentation="Manages local files, including setting ownership and&#xA;    permissions, creation of both files and directories, and&#xA;    retrieving entire files from remote servers.  As Puppet matures, it&#xA;    expected that the `file` resource will be used less and less to&#xA;    manage content, and instead native resources will be used to do so.&#xA;&#xA;    If you find that you are often copying files in from a central&#xA;    location, rather than using native resources, please contact&#xA;    Puppet Labs and we can hopefully work with you to develop a&#xA;    native resource to support what you are doing.">
    <parameters name="sourceselect" documentation="Whether to copy all valid sources, or just the first one.  This parameter&#xA;      is only used in recursive copies; by default, the first valid source is the&#xA;      only one used as a recursive source, but if this parameter is set to `all`,&#xA;      then all valid sources will have all of their contents copied to the local host,&#xA;      and for sources that have the same file, the source earlier in the list will&#xA;      be used."/>
    <parameters name="replace" documentation="Whether or not to replace a file that is&#xA;      sourced but exists.  This is useful for using file sources&#xA;      purely for initialization."/>
    <parameters name="path" documentation="The path to the file to manage.  Must be fully qualified." namevar="true"/>
    <parameters name="links" documentation="How to handle links during file actions.  During file copying,&#xA;      `follow` will copy the target file instead of the link, `manage`&#xA;      will copy the link itself, and `ignore` will just pass it by.&#xA;      When not copying, `manage` and `ignore` behave equivalently&#xA;      (because you cannot really ignore links entirely during local recursion), and `follow` will manage the file to which the&#xA;      link points."/>
    <parameters name="recurselimit" documentation="How deeply to do recursive management."/>
    <parameters name="force" documentation="Force the file operation.  Currently only used when replacing&#xA;      directories with links."/>
    <parameters name="recurse" documentation="Whether and how deeply to do recursive&#xA;      management."/>
    <parameters name="purge" documentation="Whether unmanaged files should be purged.  If you have a filebucket&#xA;      configured the purged files will be uploaded, but if you do not,&#xA;      this will destroy data.  Only use this option for generated&#xA;      files unless you really know what you are doing.  This option only&#xA;      makes sense when recursively managing directories.&#xA;&#xA;      Note that when using `purge` with `source`, Puppet will purge any files&#xA;      that are not on the remote system."/>
    <parameters name="ignore" documentation="A parameter which omits action on files matching&#xA;      specified patterns during recursion.  Uses Ruby's builtin globbing&#xA;      engine, so shell metacharacters are fully supported, e.g. `[a-z]*`.&#xA;      Matches that would descend into the directory structure are ignored,&#xA;      e.g., `*/*`."/>
    <parameters name="backup" documentation="Whether files should be backed up before&#xA;      being replaced.  The preferred method of backing files up is via&#xA;      a `filebucket`, which stores files by their MD5 sums and allows&#xA;      easy retrieval without littering directories with backups.  You&#xA;      can specify a local filebucket or a network-accessible&#xA;      server-based filebucket by setting `backup => bucket-name`.&#xA;      Alternatively, if you specify any value that begins with a `.`&#xA;      (e.g., `.puppet-bak`), then Puppet will use copy the file in&#xA;      the same directory with that value as the extension of the&#xA;      backup. Setting `backup => false` disables all backups of the&#xA;      file in question.&#xA;&#xA;      Puppet automatically creates a local filebucket named `puppet` and&#xA;      defaults to backing up there.  To use a server-based filebucket,&#xA;      you must specify one in your configuration&#xA;&#xA;            filebucket { main:&#xA;              server => puppet&#xA;            }&#xA;&#xA;      The `puppet master` daemon creates a filebucket by default,&#xA;      so you can usually back up to your main server with this&#xA;      configuration.  Once you've described the bucket in your&#xA;      configuration, you can use it in any file&#xA;&#xA;            file { &quot;/my/file&quot;:&#xA;              source => &quot;/path/in/nfs/or/something&quot;,&#xA;              backup => main&#xA;            }&#xA;&#xA;      This will back the file up to the central server.&#xA;&#xA;      At this point, the benefits of using a filebucket are that you do not&#xA;      have backup files lying around on each of your machines, a given&#xA;      version of a file is only backed up once, and you can restore&#xA;      any given file manually, no matter how old.  Eventually,&#xA;      transactional support will be able to automatically restore&#xA;      filebucketed files.&#xA;      "/>
  </types>
  <types name="filebucket" documentation="A repository for backing up files.  If no filebucket is&#xA;      defined, then files will be backed up in their current directory,&#xA;      but the filebucket can be either a host- or site-global repository&#xA;      for backing up.  It stores files and returns the MD5 sum, which&#xA;      can later be used to retrieve the file if restoration becomes&#xA;      necessary.  A filebucket does not do any work itself; instead,&#xA;      it can be specified as the value of *backup* in a **file** object.&#xA;&#xA;      Currently, filebuckets are only useful for manual retrieval of&#xA;      accidentally removed files (e.g., you look in the log for the md5 sum and retrieve the file with that sum from the filebucket), but&#xA;      when transactions are fully supported filebuckets will be used to&#xA;      undo transactions.&#xA;&#xA;      You will normally want to define a single filebucket for your&#xA;      whole network and then use that as the default backup location:&#xA;&#xA;          # Define the bucket&#xA;          filebucket { main: server => puppet }&#xA;&#xA;          # Specify it as the default target&#xA;          File { backup => main }&#xA;&#xA;      Puppetmaster servers create a filebucket by default, so this will&#xA;      work in a default configuration.">
    <parameters name="port" documentation=""/>
    <parameters name="name" documentation="The name of the filebucket." namevar="true"/>
    <parameters name="path" documentation="The path to the local filebucket.  If this is&#xA;        unset, then the bucket is remote.  The parameter *server* must&#xA;        can be specified to set the remote server."/>
    <parameters name="server" documentation="The server providing the remote filebucket.  If this is not&#xA;        specified then *path* is checked. If it is set, then the&#xA;        bucket is local.  Otherwise the puppetmaster server specified&#xA;        in the config or at the commandline is used."/>
  </types>
  <types name="group" documentation="Manage groups. On most platforms this can only create groups.&#xA;      Group membership must be managed on individual users.&#xA;&#xA;      On some platforms such as OS X, group membership is managed as an&#xA;      attribute of the group, not the user record. Providers must have&#xA;      the feature 'manages_members' to manage the 'members' property of&#xA;      a group record.">
    <properties name="gid" documentation="The group ID.  Must be specified numerically.  If not&#xA;        specified, a number will be picked, which can result in ID&#xA;        differences across systems and thus is not recommended.  The&#xA;        GID is picked according to local system standards."/>
    <properties name="members" documentation="The members of the group. For directory services where group&#xA;      membership is stored in the group objects, not the users."/>
    <parameters name="name" documentation="The group name.  While naming limitations vary by&#xA;        system, it is advisable to keep the name to the degenerate&#xA;        limitations, which is a maximum of 8 characters beginning with&#xA;        a letter." namevar="true"/>
    <parameters name="allowdupe" documentation="Whether to allow duplicate GIDs.  This option does not work on&#xA;        FreeBSD (contract to the `pw` man page)."/>
    <parameters name="auth_membership" documentation="whether the provider is authoritative for group membership."/>
    <parameters name="ensure" documentation="Create or remove the group."/>
  </types>
  <types name="host" documentation="Installs and manages host entries.  For most systems, these&#xA;      entries will just be in `/etc/hosts`, but some systems (notably OS X)&#xA;      will have different solutions.">
    <properties name="target" documentation="The file in which to store service information.  Only used by&#xA;        those providers that write to disk."/>
    <properties name="host_aliases" documentation="Any aliases the host might have.  Multiple values must be&#xA;        specified as an array."/>
    <properties name="ip" documentation="The host's IP address, IPv4 or IPv6."/>
    <parameters name="name" documentation="The host name." namevar="true"/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="k5login" documentation="Manage the `.k5login` file for a user.  Specify the full path to&#xA;    the `.k5login` file as the name and an array of principals as the&#xA;    property principals.">
    <properties name="principals" documentation="The principals present in the `.k5login` file."/>
    <properties name="mode" documentation="Manage the k5login file's mode"/>
    <parameters name="path" documentation="The path to the file to manage.  Must be fully qualified." namevar="true"/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="macauthorization" documentation="Manage the Mac OS X authorization database.&#xA;    See the [Apple developer site](http://developer.apple.com/documentation/Security/Conceptual/Security_Overview/Security_Services/chapter_4_section_5.html) for more information.">
    <properties name="shared" documentation="If this is set to true, then the Security Server marks the&#xA;    credentials used to gain this right as shared. The Security Server&#xA;    may use any shared credentials to authorize this right. For maximum&#xA;    security, set sharing to false so credentials stored by the Security&#xA;    Server for one application may not be used by another application."/>
    <properties name="allow_root" documentation="Corresponds to 'allow-root' in the authorization store, renamed&#xA;    due to hyphens being problematic. Specifies whether a right should be&#xA;    allowed automatically if the requesting process is running with&#xA;    uid == 0.  AuthorizationServices defaults this attribute to false if&#xA;    not specified"/>
    <properties name="authenticate_user" documentation="Corresponds to 'authenticate-user' in the authorization store,&#xA;    renamed due to hyphens being problematic."/>
    <properties name="auth_type" documentation="type - can be a 'right' or a 'rule'. 'comment' has not yet been&#xA;    implemented."/>
    <properties name="session_owner" documentation="Corresponds to 'session-owner' in the authorization store,&#xA;    renamed due to hyphens being problematic.  Whether the session owner&#xA;    automatically matches this rule or right."/>
    <properties name="k_of_n" documentation="k-of-n describes how large a subset of rule mechanisms must&#xA;    succeed for successful authentication. If there are 'n' mechanisms,&#xA;    then 'k' (the integer value of this parameter) mechanisms must succeed.&#xA;    The most common setting for this parameter is '1'. If k-of-n is not&#xA;    set, then 'n-of-n' mechanisms must succeed."/>
    <properties name="auth_class" documentation="Corresponds to 'class' in the authorization store, renamed due&#xA;    to 'class' being a reserved word."/>
    <properties name="rule" documentation="The rule(s) that this right refers to."/>
    <properties name="tries" documentation="The number of tries allowed."/>
    <properties name="comment" documentation="The 'comment' attribute for authorization resources."/>
    <properties name="group" documentation="The user must authenticate as a member of this group. This&#xA;    attribute can be set to any one group."/>
    <properties name="mechanisms" documentation="an array of suitable mechanisms."/>
    <properties name="timeout" documentation="The credential used by this rule expires in the specified&#xA;    number of seconds. For maximum security where the user must&#xA;    authenticate every time, set the timeout to 0. For minimum security,&#xA;    remove the timeout attribute so the user authenticates only once per&#xA;    session."/>
    <parameters name="name" documentation="The name of the right or rule to be managed.&#xA;    Corresponds to 'key' in Authorization Services. The key is the name&#xA;    of a rule. A key uses the same naming conventions as a right. The&#xA;    Security Server uses a rule&#x2019;s key to match the rule with a right.&#xA;    Wildcard keys end with a &#x2018;.&#x2019;. The generic rule has an empty key value.&#xA;    Any rights that do not match a specific rule use the generic rule." namevar="true"/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="mailalias" documentation="Creates an email alias in the local alias database.">
    <properties name="target" documentation="The file in which to store the aliases.  Only used by&#xA;        those providers that write to disk."/>
    <properties name="recipient" documentation="Where email should be sent.  Multiple values&#xA;        should be specified as an array."/>
    <parameters name="name" documentation="The alias name."/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="maillist" documentation="Manage email lists.  This resource type currently can only create&#xA;      and remove lists, it cannot reconfigure them.">
    <parameters name="mailserver" documentation="The name of the host handling email for the list."/>
    <parameters name="admin" documentation="The email address of the administrator."/>
    <parameters name="description" documentation="The description of the mailing list."/>
    <parameters name="name" documentation="The name of the email list."/>
    <parameters name="webserver" documentation="The name of the host providing web archives and the administrative interface."/>
    <parameters name="password" documentation="The admin password."/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="mcx" documentation="MCX object management using DirectoryService on OS X.&#xA;&#xA;The default provider of this type merely manages the XML plist as&#xA;reported by the dscl -mcxexport command.  This is similar to the&#xA;content property of the file type in Puppet.&#xA;&#xA;The recommended method of using this type is to use Work Group Manager&#xA;to manage users and groups on the local computer, record the resulting&#xA;puppet manifest using the command 'ralsh mcx' then deploying this&#xA;to other machines.&#xA;">
    <properties name="content" documentation="The XML Plist.  The value of MCXSettings in DirectoryService.&#xA;    This is the standard output from the system command:&#xA;        &#xA;        dscl localhost -mcxexport /Local/Default/&lt;ds_type>/ds_name&#xA;    &#xA;    Note that `ds_type` is capitalized and plural in the dscl command."/>
    <parameters name="name" documentation="The name of the resource being managed.&#xA;    The default naming convention follows Directory Service paths:&#xA;&#xA;        /Computers/localhost&#xA;        /Groups/admin&#xA;        /Users/localadmin&#xA;&#xA;    The `ds_type` and `ds_name` type parameters are not necessary if the&#xA;    default naming convention is followed." namevar="true"/>
    <parameters name="ds_type" documentation="The DirectoryService type this MCX setting attaches to."/>
    <parameters name="ds_name" documentation="The name to attach the MCX Setting to.&#xA;    e.g. 'localhost' when ds_type => computer. This setting is not&#xA;    required, as it may be parsed so long as the resource name is&#xA;    parseable.  e.g. /Groups/admin where 'group' is the dstype."/>
    <parameters name="ensure" documentation="Create or remove the MCX setting."/>
  </types>
  <types name="mount" documentation="Manages mounted filesystems, including putting mount&#xA;      information into the mount table. The actual behavior depends&#xA;      on the value of the 'ensure' parameter.&#xA;&#xA;      Note that if a `mount` receives an event from another resource,&#xA;      it will try to remount the filesystems if `ensure` is set to `mounted`.">
    <properties name="dump" documentation="Whether to dump the mount.  Not all platform support this.&#xA;        Valid values are `1` or `0`. or `2` on FreeBSD, Default is `0`."/>
    <properties name="fstype" documentation="The mount type.  Valid values depend on the&#xA;        operating system.  This is a required option."/>
    <properties name="blockdevice" documentation="The device to fsck.  This is property is only valid&#xA;        on Solaris, and in most cases will default to the correct&#xA;        value."/>
    <properties name="atboot" documentation="Whether to mount the mount at boot.  Not all platforms&#xA;        support this."/>
    <properties name="target" documentation="The file in which to store the mount table.  Only used by&#xA;        those providers that write to disk."/>
    <properties name="device" documentation="The device providing the mount.  This can be whatever&#xA;        device is supporting by the mount, including network&#xA;        devices or devices specified by UUID rather than device&#xA;        path, depending on the operating system."/>
    <properties name="pass" documentation="The pass in which the mount is checked."/>
    <properties name="options" documentation="Mount options for the mounts, as they would&#xA;        appear in the fstab."/>
    <properties name="ensure" documentation="Control what to do with this mount. Set this attribute to&#xA;        `umounted` to make sure the filesystem is in the filesystem table&#xA;        but not mounted (if the filesystem is currently mounted, it will be unmounted).  Set it to `absent` to unmount (if necessary) and remove&#xA;        the filesystem from the fstab.  Set to `mounted` to add it to the&#xA;        fstab and mount it. Set to `present` to add to fstab but not change&#xA;        mount/unmount status"/>
    <parameters name="name" documentation="The mount path for the mount." namevar="true"/>
    <parameters name="path" documentation="The deprecated name for the mount point.  Please use `name` now."/>
    <parameters name="remounts" documentation="Whether the mount can be remounted  `mount -o remount`.  If&#xA;        this is false, then the filesystem will be unmounted and remounted&#xA;        manually, which is prone to failure."/>
  </types>
  <types name="notify" documentation="Sends an arbitrary message to the agent run-time log.">
    <properties name="message" documentation="The message to be sent to the log."/>
    <parameters name="name" documentation="An arbitrary tag for your own reference; the name of the message." namevar="true"/>
    <parameters name="withpath" documentation="Whether to not to show the full object path."/>
  </types>
  <types name="package" documentation="Manage packages.  There is a basic dichotomy in package&#xA;      support right now:  Some package types (e.g., yum and apt) can&#xA;      retrieve their own package files, while others (e.g., rpm and sun) cannot.  For those package formats that cannot retrieve&#xA;      their own files, you can use the `source` parameter to point to&#xA;      the correct file.&#xA;&#xA;      Puppet will automatically guess the packaging format that you are&#xA;      using based on the platform you are on, but you can override it&#xA;      using the `provider` parameter; each provider defines what it&#xA;      requires in order to function, and you must meet those requirements&#xA;      to use a given provider.">
    <parameters name="platform" documentation="A read-only parameter set by the package."/>
    <parameters name="status" documentation="A read-only parameter set by the package."/>
    <parameters name="root" documentation="A read-only parameter set by the package."/>
    <parameters name="vendor" documentation="A read-only parameter set by the package."/>
    <parameters name="flavor" documentation="Newer versions of OpenBSD support 'flavors', which are&#xA;        further specifications for which type of package you want."/>
    <parameters name="allowcdrom" documentation="Tells apt to allow cdrom sources in the sources.list file.&#xA;        Normally apt will bail if you try this."/>
    <parameters name="type" documentation="Deprecated form of `provider`."/>
    <parameters name="configfiles" documentation="Whether configfiles should be kept or replaced.  Most packages&#xA;        types do not support this parameter."/>
    <parameters name="category" documentation="A read-only parameter set by the package."/>
    <parameters name="source" documentation="Where to find the actual package.  This must be a local file&#xA;        (or on a network file system) or a URL that your specific&#xA;        packaging type understands; Puppet will not retrieve files for you."/>
    <parameters name="responsefile" documentation="A file containing any necessary answers to questions asked by&#xA;        the package.  This is currently used on Solaris and Debian.  The&#xA;        value will be validated according to system rules, but it should&#xA;        generally be a fully qualified path."/>
    <parameters name="description" documentation="A read-only parameter set by the package."/>
    <parameters name="name" documentation="The package name.  This is the name that the packaging&#xA;      system uses internally, which is sometimes (especially on Solaris)&#xA;      a name that is basically useless to humans.  If you want to&#xA;      abstract package installation, then you can use aliases to provide&#xA;      a common name to packages:&#xA;&#xA;          # In the 'openssl' class&#xA;          $ssl = $operatingsystem ? {&#xA;            solaris => SMCossl,&#xA;            default => openssl&#xA;          }&#xA;&#xA;          # It is not an error to set an alias to the same value as the&#xA;          # object name.&#xA;          package { $ssl:&#xA;            ensure => installed,&#xA;            alias => openssl&#xA;          }&#xA;&#xA;          . etc. .&#xA;&#xA;          $ssh = $operatingsystem ? {&#xA;            solaris => SMCossh,&#xA;            default => openssh&#xA;          }&#xA;&#xA;          # Use the alias to specify a dependency, rather than&#xA;          # having another selector to figure it out again.&#xA;          package { $ssh:&#xA;            ensure => installed,&#xA;            alias => openssh,&#xA;            require => Package[openssl]&#xA;          }&#xA;&#xA;      " namevar="true"/>
    <parameters name="instance" documentation="A read-only parameter set by the package."/>
    <parameters name="adminfile" documentation="A file containing package defaults for installing packages.&#xA;        This is currently only used on Solaris.  The value will be&#xA;        validated according to system rules, which in the case of&#xA;        Solaris means that it should either be a fully qualified path&#xA;        or it should be in `/var/sadm/install/admin`."/>
    <parameters name="ensure" documentation="What state the package should be in.&#xA;        *latest* only makes sense for those packaging formats that can&#xA;        retrieve new packages on their own and will throw an error on&#xA;        those that cannot.  For those packaging systems that allow you&#xA;        to specify package versions, specify them here.  Similarly,&#xA;        *purged* is only useful for packaging systems that support&#xA;        the notion of managing configuration files separately from&#xA;        'normal' system files."/>
  </types>
  <types name="resources" documentation="This is a metatype that can manage other resource types.  Any&#xA;    metaparams specified here will be passed on to any generated resources,&#xA;    so you can purge umanaged resources but set `noop` to true so the&#xA;    purging is only logged and does not actually happen.">
    <parameters name="name" documentation="The name of the type to be managed."/>
    <parameters name="unless_system_user" documentation="This keeps system users from being purged.  By default, it&#xA;      does not purge users whose UIDs are less than or equal to 500, but you can specify&#xA;      a different UID as the inclusive limit."/>
    <parameters name="purge" documentation="Purge unmanaged resources.  This will delete any resource&#xA;      that is not specified in your configuration&#xA;      and is not required by any specified resources."/>
  </types>
  <types name="schedule" documentation="Defined schedules for Puppet.  The important thing to understand&#xA;      about how schedules are currently implemented in Puppet is that they&#xA;      can only be used to stop a resource from being applied, they never&#xA;      guarantee that it is applied.&#xA;&#xA;      Every time Puppet applies its configuration, it will collect the&#xA;      list of resources whose schedule does not eliminate them from&#xA;      running right then, but there is currently no system in place to&#xA;      guarantee that a given resource runs at a given time.  If you&#xA;      specify a very  restrictive schedule and Puppet happens to run at a&#xA;      time within that schedule, then the resources will get applied;&#xA;      otherwise, that work may never get done.&#xA;&#xA;      Thus, it behooves you to use wider scheduling (e.g., over a couple of&#xA;      hours) combined with periods and repetitions.  For instance, if you&#xA;      wanted to restrict certain resources to only running once, between&#xA;      the hours of two and 4 AM, then you would use this schedule:&#xA;&#xA;        schedule { maint:&#xA;          range => &quot;2 - 4&quot;,&#xA;          period => daily,&#xA;          repeat => 1&#xA;        }&#xA;&#xA;      With this schedule, the first time that Puppet runs between 2 and 4 AM,&#xA;      all resources with this schedule will get applied, but they won't&#xA;      get applied again between 2 and 4 because they will have already&#xA;      run once that day, and they won't get applied outside that schedule&#xA;      because they will be outside the scheduled range.&#xA;&#xA;      Puppet automatically creates a schedule for each valid period with the&#xA;      same name as that period (e.g., hourly and daily).  Additionally,&#xA;      a schedule named *puppet* is created and used as the default,&#xA;      with the following attributes:&#xA;&#xA;        schedule { puppet:&#xA;          period => hourly,&#xA;          repeat => 2&#xA;        }&#xA;&#xA;      This will cause resources to be applied every 30 minutes by default.&#xA;      ">
    <parameters name="range" documentation="The earliest and latest that a resource can be applied.  This&#xA;        is always a range within a 24 hour period, and hours must be&#xA;        specified in numbers between 0 and 23, inclusive.  Minutes and&#xA;        seconds can be provided, using the normal colon as a separator.&#xA;        For instance:&#xA;&#xA;          schedule { maintenance:&#xA;            range => &quot;1:30 - 4:30&quot;&#xA;          }&#xA;&#xA;        This is mostly useful for restricting certain resources to being&#xA;        applied in maintenance windows or during off-peak hours."/>
    <parameters name="name" documentation="The name of the schedule.  This name is used to retrieve the&#xA;        schedule when assigning it to an object:&#xA;&#xA;          schedule { daily:&#xA;            period => daily,&#xA;            range => &quot;2 - 4&quot;,&#xA;          }&#xA;&#xA;          exec { &quot;/usr/bin/apt-get update&quot;:&#xA;            schedule => daily&#xA;          }&#xA;&#xA;        " namevar="true"/>
    <parameters name="repeat" documentation="How often the application gets repeated in a given period.&#xA;        Defaults to 1. Must be an integer."/>
    <parameters name="period" documentation="The period of repetition for a resource.  Choose from among&#xA;        a fixed list of *hourly*, *daily*, *weekly*, and *monthly*.&#xA;        The default is for a resource to get applied every time that&#xA;        Puppet runs, whatever that period is.&#xA;&#xA;        Note that the period defines how often a given resource will get&#xA;        applied but not when; if you would like to restrict the hours&#xA;        that a given resource can be applied (e.g., only at night during&#xA;        a maintenance window) then use the `range` attribute.&#xA;&#xA;        If the provided periods are not sufficient, you can provide a&#xA;        value to the *repeat* attribute, which will cause Puppet to&#xA;        schedule the affected resources evenly in the period the&#xA;        specified number of times.  Take this schedule:&#xA;&#xA;            schedule { veryoften:&#xA;              period => hourly,&#xA;              repeat => 6&#xA;            }&#xA;&#xA;        This can cause Puppet to apply that resource up to every 10 minutes.&#xA;&#xA;        At the moment, Puppet cannot guarantee that level of&#xA;        repetition; that is, it can run up to every 10 minutes, but&#xA;        internal factors might prevent it from actually running that&#xA;        often (e.g., long-running Puppet runs will squash conflictingly scheduled runs).&#xA;&#xA;        See the `periodmatch` attribute for tuning whether to match&#xA;        times by their distance apart or by their specific value."/>
    <parameters name="periodmatch" documentation="Whether periods should be matched by number (e.g., the two times&#xA;        are in the same hour) or by distance (e.g., the two times are&#xA;        60 minutes apart)."/>
  </types>
  <types name="selboolean" documentation="Manages SELinux booleans on systems with SELinux support.  The supported booleans&#xA;      are any of the ones found in `/selinux/booleans/`.">
    <properties name="value" documentation="Whether the the SELinux boolean should be enabled or disabled."/>
    <parameters name="persistent" documentation="If set true, SELinux booleans will be written to disk and persist accross reboots.&#xA;        The default is `false`."/>
    <parameters name="name" documentation="The name of the SELinux boolean to be managed." namevar="true"/>
  </types>
  <types name="selmodule" documentation="Manages loading and unloading of SELinux policy modules&#xA;    on the system.  Requires SELinux support.  See man semodule(8)&#xA;    for more information on SELinux policy modules.">
    <properties name="syncversion" documentation="If set to `true`, the policy will be reloaded if the&#xA;    version found in the on-disk file differs from the loaded&#xA;    version.  If set to `false` (the default) the the only check&#xA;    that will be made is if the policy is loaded at all or not."/>
    <parameters name="selmodulepath" documentation="The full path to the compiled .pp policy module.  You only need to use&#xA;      this if the module file is not in the directory pointed at by selmoduledir."/>
    <parameters name="name" documentation="The name of the SELinux policy to be managed.  You should not&#xA;      include the customary trailing .pp extension." namevar="true"/>
    <parameters name="selmoduledir" documentation="The directory to look for the compiled pp module file in.&#xA;      Currently defaults to `/usr/share/selinux/targeted`.  If selmodulepath&#xA;      is not specified the module will be looked for in this directory in a&#xA;      in a file called NAME.pp, where NAME is the value of the name parameter."/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="service" documentation="Manage running services.  Service support unfortunately varies&#xA;      widely by platform -- some platforms have very little if any&#xA;      concept of a running service, and some have a very codified and&#xA;      powerful concept.  Puppet's service support will generally be able&#xA;      to make up for any inherent shortcomings (e.g., if there is no&#xA;      'status' command, then Puppet will look in the process table for a&#xA;      command matching the service name), but the more information you&#xA;      can provide the better behaviour you will get.  Or, you can just&#xA;      use a platform that has very good service support.&#xA;&#xA;      Note that if a `service` receives an event from another resource,&#xA;      the service will get restarted. The actual command to restart the&#xA;      service depends on the platform. You can provide a special command&#xA;      for restarting with the `restart` attribute.">
    <properties name="enable" documentation="Whether a service should be enabled to start at boot.&#xA;        This property behaves quite differently depending on the platform;&#xA;        wherever possible, it relies on local tools to enable or disable&#xA;        a given service."/>
    <properties name="ensure" documentation="Whether a service should be running."/>
    <parameters name="control" documentation="The control variable used to manage services (originally for HP-UX).&#xA;        Defaults to the upcased service name plus `START` replacing dots with&#xA;        underscores, for those providers that support the `controllable` feature."/>
    <parameters name="stop" documentation="Specify a *stop* command manually."/>
    <parameters name="restart" documentation="Specify a *restart* command manually.  If left&#xA;        unspecified, the service will be stopped and then started."/>
    <parameters name="binary" documentation="The path to the daemon.  This is only used for&#xA;        systems that do not support init scripts.  This binary will be&#xA;        used to start the service if no `start` parameter is&#xA;        provided."/>
    <parameters name="pattern" documentation="The pattern to search for in the process table.&#xA;        This is used for stopping services on platforms that do not&#xA;        support init scripts, and is also used for determining service&#xA;        status on those service whose init scripts do not include a status&#xA;        command.&#xA;&#xA;        If this is left unspecified and is needed to check the status&#xA;        of a service, then the service name will be used instead.&#xA;&#xA;        The pattern can be a simple string or any legal Ruby pattern."/>
    <parameters name="status" documentation="Specify a *status* command manually.  If left&#xA;        unspecified, the status method will be determined&#xA;        automatically, usually by looking for the service in the&#xA;        process table."/>
    <parameters name="start" documentation="Specify a *start* command manually.  Most service subsystems&#xA;        support a `start` command, so this will not need to be&#xA;        specified."/>
    <parameters name="name" documentation="The name of the service to run.  This name is used to find&#xA;        the service in whatever service subsystem it is in." namevar="true"/>
    <parameters name="manifest" documentation="Specify a command to config a service, or a path to a manifest to do so."/>
    <parameters name="path" documentation="The search path for finding init scripts.  Multiple values should&#xA;        be separated by colons or provided as an array."/>
    <parameters name="hasrestart" documentation="Specify that an init script has a `restart` option.  Otherwise,&#xA;        the init script's `stop` and `start` methods are used."/>
    <parameters name="hasstatus" documentation="Declare the the service's init script has a&#xA;        functional status command.  Based on testing, it was found&#xA;        that a large number of init scripts on different platforms do&#xA;        not support any kind of status command; thus, you must specify&#xA;        manually whether the service you are running has such a&#xA;        command (or you can specify a specific command using the&#xA;        `status` parameter).&#xA;&#xA;        If you do not specify anything, then the service name will be&#xA;        looked for in the process table."/>
  </types>
  <types name="ssh_authorized_key" documentation="Manages SSH authorized keys. Currently only type 2 keys are&#xA;    supported.">
    <properties name="target" documentation="The absolute filename in which to store the SSH key. This&#xA;      property is optional and should only be used in cases where keys&#xA;      are stored in a non-standard location (i.e.` not in&#xA;      `~user/.ssh/authorized_keys`)."/>
    <properties name="type" documentation="The encryption type used: ssh-dss or ssh-rsa."/>
    <properties name="user" documentation="The user account in which the SSH key should be installed.&#xA;      The resource will automatically depend on this user."/>
    <properties name="key" documentation="The key itself; generally a long string of hex digits."/>
    <properties name="options" documentation="Key options, see sshd(8) for possible values. Multiple values&#xA;        should be specified as an array."/>
    <parameters name="name" documentation="The SSH key comment. This attribute is currently used as a&#xA;      system-wide primary key and therefore has to be unique." namevar="true"/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="sshkey" documentation="Installs and manages ssh host keys.  At this point, this type&#xA;      only knows how to install keys into `/etc/ssh/ssh_known_hosts`.  See &#xA;      the `ssh_authorized_key` type to manage authorized keys.">
    <properties name="target" documentation="The file in which to store the ssh key.  Only used by&#xA;        the `parsed` provider."/>
    <properties name="type" documentation="The encryption type used.  Probably ssh-dss or ssh-rsa."/>
    <properties name="key" documentation="The key itself; generally a long string of hex digits."/>
    <properties name="host_aliases" documentation="Any aliases the host might have.  Multiple values must be&#xA;        specified as an array."/>
    <parameters name="name" documentation="The host name that the key is associated with." namevar="true"/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="stage" documentation="">
    <parameters name="name" documentation="The name of the stage. This will be used as the 'stage' for each resource."/>
  </types>
  <types name="tidy" documentation="Remove unwanted files based on specific criteria.  Multiple&#xA;    criteria are OR'd together, so a file that is too large but is not&#xA;    old enough will still get tidied.&#xA;&#xA;    If you don't specify either `age` or `size`, then all files will&#xA;    be removed.&#xA;&#xA;    This resource type works by generating a file resource for every file&#xA;    that should be deleted and then letting that resource perform the&#xA;    actual deletion.&#xA;    ">
    <parameters name="matches" documentation="One or more (shell type) file glob patterns, which restrict&#xA;      the list of files to be tidied to those whose basenames match&#xA;      at least one of the patterns specified. Multiple patterns can&#xA;      be specified using an array.&#xA;&#xA;      Example:&#xA;&#xA;          tidy { &quot;/tmp&quot;:&#xA;            age => &quot;1w&quot;,&#xA;            recurse => 1,&#xA;            matches => [ &quot;[0-9]pub*.tmp&quot;, &quot;*.temp&quot;, &quot;tmpfile?&quot; ]&#xA;          }&#xA;&#xA;      This removes files from `/tmp` if they are one week old or older,&#xA;      are not in a subdirectory and match one of the shell globs given.&#xA;&#xA;      Note that the patterns are matched against the basename of each&#xA;      file -- that is, your glob patterns should not have any '/'&#xA;      characters in them, since you are only specifying against the last&#xA;      bit of the file.&#xA;&#xA;      Finally, note that you must now specify a non-zero/non-false value&#xA;      for recurse if matches is used, as matches only apply to files found&#xA;      by recursion (there's no reason to use static patterns match against&#xA;      a statically determined path).  Requiering explicit recursion clears&#xA;      up a common source of confusion."/>
    <parameters name="age" documentation="Tidy files whose age is equal to or greater than&#xA;      the specified time.  You can choose seconds, minutes,&#xA;      hours, days, or weeks by specifying the first letter of any&#xA;      of those words (e.g., '1w').&#xA;&#xA;      Specifying 0 will remove all files."/>
    <parameters name="path" documentation="The path to the file or directory to manage.  Must be fully&#xA;      qualified." namevar="true"/>
    <parameters name="rmdirs" documentation="Tidy directories in addition to files; that is, remove&#xA;      directories whose age is older than the specified criteria.&#xA;      This will only remove empty directories, so all contained&#xA;      files must also be tidied before a directory gets removed."/>
    <parameters name="type" documentation="Set the mechanism for determining age."/>
    <parameters name="recurse" documentation="If target is a directory, recursively descend&#xA;      into the directory looking for files to tidy."/>
    <parameters name="size" documentation="Tidy files whose size is equal to or greater than&#xA;      the specified size.  Unqualified values are in kilobytes, but&#xA;      *b*, *k*, and *m* can be appended to specify *bytes*, *kilobytes*,&#xA;      and *megabytes*, respectively.  Only the first character is&#xA;      significant, so the full word can also be used."/>
    <parameters name="backup" documentation="Whether tidied files should be backed up.  Any values are passed&#xA;      directly to the file resources used for actual file deletion, so use&#xA;      its backup documentation to determine valid values."/>
  </types>
  <types name="user" documentation="Manage users.  This type is mostly built to manage system&#xA;      users, so it is lacking some features useful for managing normal&#xA;      users.&#xA;&#xA;      This resource type uses the prescribed native tools for creating&#xA;      groups and generally uses POSIX APIs for retrieving information&#xA;      about them.  It does not directly modify `/etc/passwd` or anything.">
    <properties name="uid" documentation="The user ID.  Must be specified numerically.  For new users&#xA;        being created, if no user ID is specified then one will be&#xA;        chosen automatically, which will likely result in the same user&#xA;        having different IDs on different systems, which is not&#xA;        recommended.  This is especially noteworthy if you use Puppet&#xA;        to manage the same user on both Darwin and other platforms,&#xA;        since Puppet does the ID generation for you on Darwin, but the&#xA;        tools do so on other platforms."/>
    <properties name="password_min_age" documentation="The minimum amount of time in days a password must be used before it may be changed"/>
    <properties name="home" documentation="The home directory of the user.  The directory must be created&#xA;        separately and is not currently checked for existence."/>
    <properties name="shell" documentation="The user's login shell.  The shell must exist and be&#xA;        executable."/>
    <properties name="auths" documentation="The auths the user has.  Multiple auths should be&#xA;        specified as an array."/>
    <properties name="keys" documentation="Specify user attributes in an array of keyvalue pairs"/>
    <properties name="password" documentation="The user's password, in whatever encrypted format the local machine requires. Be sure to enclose any value that includes a dollar sign ($) in single quotes (')."/>
    <properties name="expiry" documentation="The expiry date for this user. Must be provided in&#xA;           a zero padded YYYY-MM-DD format - e.g 2010-02-19."/>
    <properties name="project" documentation="The name of the project associated with a user"/>
    <properties name="password_max_age" documentation="The maximum amount of time in days a password may be used before it must be changed"/>
    <properties name="roles" documentation="The roles the user has.  Multiple roles should be&#xA;        specified as an array."/>
    <properties name="gid" documentation="The user's primary group.  Can be specified numerically or&#xA;        by name."/>
    <properties name="profiles" documentation="The profiles the user has.  Multiple profiles should be&#xA;        specified as an array."/>
    <properties name="comment" documentation="A description of the user.  Generally is a user's full name."/>
    <properties name="groups" documentation="The groups of which the user is a member.  The primary&#xA;        group should not be listed.  Multiple groups should be&#xA;        specified as an array."/>
    <properties name="ensure" documentation="The basic state that the object should be in."/>
    <parameters name="key_membership" documentation="Whether specified key value pairs should be treated as the only attributes&#xA;        of the user or whether they should merely&#xA;        be treated as the minimum list."/>
    <parameters name="membership" documentation="Whether specified groups should be treated as the only groups&#xA;        of which the user is a member or whether they should merely&#xA;        be treated as the minimum membership list."/>
    <parameters name="profile_membership" documentation="Whether specified roles should be treated as the only roles&#xA;        of which the user is a member or whether they should merely&#xA;        be treated as the minimum membership list."/>
    <parameters name="name" documentation="User name.  While limitations are determined for&#xA;        each operating system, it is generally a good idea to keep to&#xA;        the degenerate 8 characters, beginning with a letter." namevar="true"/>
    <parameters name="allowdupe" documentation="Whether to allow duplicate UIDs."/>
    <parameters name="auth_membership" documentation="Whether specified auths should be treated as the only auths&#xA;        of which the user is a member or whether they should merely&#xA;        be treated as the minimum membership list."/>
    <parameters name="role_membership" documentation="Whether specified roles should be treated as the only roles&#xA;        of which the user is a member or whether they should merely&#xA;        be treated as the minimum membership list."/>
    <parameters name="managehome" documentation="Whether to manage the home directory when managing the user."/>
  </types>
  <types name="whit" documentation="">
    <parameters name="name" documentation="The name of the whit, because it must have one."/>
  </types>
  <types name="yumrepo" documentation="The client-side description of a yum repository. Repository&#xA;      configurations are found by parsing `/etc/yum.conf` and&#xA;      the files indicated by the `reposdir` option in that file &#xA;      (see yum.conf(5) for details)&#xA;&#xA;      Most parameters are identical to the ones documented&#xA;      in yum.conf(5)&#xA;&#xA;      Continuation lines that yum supports for example for the&#xA;      baseurl are not supported. No attempt is made to access&#xA;      files included with the **include** directive">
    <properties name="proxy_password" documentation=""/>
    <properties name="enabled" documentation=""/>
    <properties name="metadata_expire" documentation=""/>
    <properties name="exclude" documentation=""/>
    <properties name="protect" documentation=""/>
    <properties name="http_caching" documentation=""/>
    <properties name="cost" documentation=""/>
    <properties name="includepkgs" documentation=""/>
    <properties name="include" documentation=""/>
    <properties name="proxy_username" documentation=""/>
    <properties name="gpgcheck" documentation=""/>
    <properties name="gpgkey" documentation=""/>
    <properties name="priority" documentation=""/>
    <properties name="proxy" documentation=""/>
    <properties name="mirrorlist" documentation=""/>
    <properties name="baseurl" documentation=""/>
    <properties name="failovermethod" documentation=""/>
    <properties name="keepalive" documentation=""/>
    <properties name="descr" documentation=""/>
    <properties name="enablegroups" documentation=""/>
    <properties name="timeout" documentation=""/>
    <parameters name="name" documentation="The name of the repository.  This corresponds to the&#xA;        repositoryid parameter in yum.conf(5)." namevar="true"/>
  </types>
  <types name="zfs" documentation="Manage zfs. Create destroy and set properties on zfs instances.">
    <properties name="sharenfs" documentation="The sharenfs property."/>
    <properties name="quota" documentation="The quota property."/>
    <properties name="copies" documentation="The copies property."/>
    <properties name="mountpoint" documentation="The mountpoint property."/>
    <properties name="reservation" documentation="The reservation property."/>
    <properties name="snapdir" documentation="The snapdir property."/>
    <properties name="compression" documentation="The compression property."/>
    <parameters name="name" documentation="The full name for this filesystem. (including the zpool)"/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="zone" documentation="Solaris zones.">
    <properties name="shares" documentation="Number of FSS CPU shares allocated to the zone."/>
    <properties name="pool" documentation="The resource pool for this zone."/>
    <properties name="autoboot" documentation="Whether the zone should automatically boot."/>
    <properties name="inherit" documentation="The list of directories that the zone inherits from the global&#xA;      zone.  All directories must be fully qualified."/>
    <properties name="iptype" documentation="The IP stack type of the zone. Can either be 'shared' or 'exclusive'."/>
    <properties name="ip" documentation="The IP address of the zone.  IP addresses must be specified&#xA;      with the interface, separated by a colon, e.g.: bge0:192.168.0.1.&#xA;      For multiple interfaces, specify them in an array."/>
    <parameters name="id" documentation="The numerical ID of the zone.  This number is autogenerated&#xA;      and cannot be changed."/>
    <parameters name="create_args" documentation="Arguments to the zonecfg create command.  This can be used to create branded zones."/>
    <parameters name="clone" documentation="Instead of installing the zone, clone it from another zone.&#xA;      If the zone root resides on a zfs file system, a snapshot will be&#xA;      used to create the clone, is it redisides on ufs, a copy of the zone&#xA;      will be used. The zone you clone from must not be running."/>
    <parameters name="install_args" documentation="Arguments to the zoneadm install command.  This can be used to create branded zones."/>
    <parameters name="sysidcfg" documentation="The text to go into the sysidcfg file when the zone is first&#xA;      booted.  The best way is to use a template:&#xA;&#xA;          # $templatedir/sysidcfg&#xA;          system_locale=en_US&#xA;          timezone=GMT&#xA;          terminal=xterms&#xA;          security_policy=NONE&#xA;          root_password=&lt;%= password %>&#xA;          timeserver=localhost&#xA;          name_service=DNS {domain_name=&lt;%= domain %> name_server=&lt;%= nameserver %>}&#xA;          network_interface=primary {hostname=&lt;%= realhostname %>&#xA;            ip_address=&lt;%= ip %>&#xA;            netmask=&lt;%= netmask %>&#xA;            protocol_ipv6=no&#xA;            default_route=&lt;%= defaultroute %>}&#xA;          nfs4_domain=dynamic&#xA;&#xA;      And then call that:&#xA;&#xA;          zone { myzone:&#xA;            ip => &quot;bge0:192.168.0.23&quot;,&#xA;            sysidcfg => template(sysidcfg),&#xA;            path => &quot;/opt/zones/myzone&quot;,&#xA;            realhostname => &quot;fully.qualified.domain.name&quot;&#xA;          }&#xA;&#xA;      The sysidcfg only matters on the first booting of the zone,&#xA;      so Puppet only checks for it at that time."/>
    <parameters name="name" documentation="The name of the zone." namevar="true"/>
    <parameters name="path" documentation="The root of the zone's filesystem.  Must be a fully qualified&#xA;      file name.  If you include '%s' in the path, then it will be&#xA;      replaced with the zone's name.  At this point, you cannot use&#xA;      Puppet to move a zone."/>
    <parameters name="realhostname" documentation="The actual hostname of the zone."/>
    <parameters name="ensure" documentation="The running state of the zone.  The valid states directly reflect&#xA;      the states that `zoneadm` provides.  The states are linear,&#xA;      in that a zone must be `configured` then `installed`, and&#xA;      only then can be `running`.  Note also that `halt` is currently&#xA;      used to stop zones."/>
  </types>
  <types name="zpool" documentation="Manage zpools. Create and delete zpools. The provider WILL NOT SYNC, only report differences.&#xA;&#xA;      Supports vdevs with mirrors, raidz, logs and spares.">
    <properties name="mirror" documentation="List of all the devices to mirror for this pool. Each mirror should be a space separated string:&#xA;&#xA;    mirror => [&quot;disk1 disk2&quot;, &quot;disk3 disk4&quot;]&#xA;&#xA;      "/>
    <properties name="raidz" documentation="List of all the devices to raid for this pool. Should be an array of space separated strings:&#xA;      &#xA;          raidz => [&quot;disk1 disk2&quot;, &quot;disk3 disk4&quot;]&#xA;&#xA;      "/>
    <properties name="spare" documentation="Spare disk(s) for this pool."/>
    <properties name="disk" documentation="The disk(s) for this pool. Can be an array or space separated string"/>
    <properties name="log" documentation="Log disks for this pool. (doesn't support mirroring yet)"/>
    <parameters name="pool" documentation="The name for this pool." namevar="true"/>
    <parameters name="raid_parity" documentation="Determines parity when using raidz property."/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="nagios_host" documentation="">
    <parameters name="notification_period" documentation=""/>
    <parameters name="process_perf_data" documentation=""/>
    <parameters name="parents" documentation=""/>
    <parameters name="icon_image" documentation=""/>
    <parameters name="check_interval" documentation=""/>
    <parameters name="vrml_image" documentation=""/>
    <parameters name="use" documentation=""/>
    <parameters name="obsess_over_host" documentation=""/>
    <parameters name="freshness_threshold" documentation=""/>
    <parameters name="failure_prediction_enabled" documentation=""/>
    <parameters name="max_check_attempts" documentation=""/>
    <parameters name="contacts" documentation=""/>
    <parameters name="notes_url" documentation=""/>
    <parameters name="active_checks_enabled" documentation=""/>
    <parameters name="high_flap_threshold" documentation=""/>
    <parameters name="notifications_enabled" documentation=""/>
    <parameters name="passive_checks_enabled" documentation=""/>
    <parameters name="hostgroups" documentation=""/>
    <parameters name="check_freshness" documentation=""/>
    <parameters name="flap_detection_enabled" documentation=""/>
    <parameters name="2d_coords" documentation=""/>
    <parameters name="icon_image_alt" documentation=""/>
    <parameters name="notification_options" documentation=""/>
    <parameters name="action_url" documentation=""/>
    <parameters name="notification_interval" documentation=""/>
    <parameters name="ensure" documentation=""/>
    <parameters name="statusmap_image" documentation=""/>
    <parameters name="low_flap_threshold" documentation=""/>
    <parameters name="stalking_options" documentation=""/>
    <parameters name="alias" documentation=""/>
    <parameters name="event_handler_enabled" documentation=""/>
    <parameters name="3d_coords" documentation=""/>
    <parameters name="flap_detection_options" documentation=""/>
    <parameters name="host_name" documentation=""/>
    <parameters name="check_period" documentation=""/>
    <parameters name="retry_interval" documentation=""/>
    <parameters name="first_notification_delay" documentation=""/>
    <parameters name="register" documentation=""/>
    <parameters name="display_name" documentation=""/>
    <parameters name="initial_state" documentation=""/>
    <parameters name="address" documentation=""/>
    <parameters name="event_handler" documentation=""/>
    <parameters name="target" documentation=""/>
    <parameters name="retain_nonstatus_information" documentation=""/>
    <parameters name="notes" documentation=""/>
    <parameters name="retain_status_information" documentation=""/>
    <parameters name="check_command" documentation=""/>
    <parameters name="contact_groups" documentation=""/>
  </types>
  <types name="nagios_hostgroup" documentation="">
    <parameters name="register" documentation=""/>
    <parameters name="notes_url" documentation=""/>
    <parameters name="alias" documentation=""/>
    <parameters name="target" documentation=""/>
    <parameters name="use" documentation=""/>
    <parameters name="hostgroup_members" documentation=""/>
    <parameters name="notes" documentation=""/>
    <parameters name="action_url" documentation=""/>
    <parameters name="members" documentation=""/>
    <parameters name="hostgroup_name" documentation=""/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="nagios_service" documentation="">
    <parameters name="notification_period" documentation=""/>
    <parameters name="process_perf_data" documentation=""/>
    <parameters name="icon_image" documentation=""/>
    <parameters name="servicegroups" documentation=""/>
    <parameters name="check_interval" documentation=""/>
    <parameters name="use" documentation=""/>
    <parameters name="freshness_threshold" documentation=""/>
    <parameters name="failure_prediction_enabled" documentation=""/>
    <parameters name="max_check_attempts" documentation=""/>
    <parameters name="contacts" documentation=""/>
    <parameters name="hostgroup_name" documentation=""/>
    <parameters name="notes_url" documentation=""/>
    <parameters name="high_flap_threshold" documentation=""/>
    <parameters name="is_volatile" documentation=""/>
    <parameters name="normal_check_interval" documentation=""/>
    <parameters name="active_checks_enabled" documentation=""/>
    <parameters name="notifications_enabled" documentation=""/>
    <parameters name="passive_checks_enabled" documentation=""/>
    <parameters name="obsess_over_service" documentation=""/>
    <parameters name="check_freshness" documentation=""/>
    <parameters name="flap_detection_enabled" documentation=""/>
    <parameters name="icon_image_alt" documentation=""/>
    <parameters name="notification_options" documentation=""/>
    <parameters name="action_url" documentation=""/>
    <parameters name="notification_interval" documentation=""/>
    <parameters name="ensure" documentation=""/>
    <parameters name="low_flap_threshold" documentation=""/>
    <parameters name="_naginator_name" documentation=""/>
    <parameters name="stalking_options" documentation=""/>
    <parameters name="event_handler_enabled" documentation=""/>
    <parameters name="retry_check_interval" documentation=""/>
    <parameters name="flap_detection_options" documentation=""/>
    <parameters name="host_name" documentation=""/>
    <parameters name="check_period" documentation=""/>
    <parameters name="retry_interval" documentation=""/>
    <parameters name="parallelize_check" documentation=""/>
    <parameters name="first_notification_delay" documentation=""/>
    <parameters name="register" documentation=""/>
    <parameters name="display_name" documentation=""/>
    <parameters name="initial_state" documentation=""/>
    <parameters name="event_handler" documentation=""/>
    <parameters name="target" documentation=""/>
    <parameters name="retain_nonstatus_information" documentation=""/>
    <parameters name="notes" documentation=""/>
    <parameters name="retain_status_information" documentation=""/>
    <parameters name="check_command" documentation=""/>
    <parameters name="service_description" documentation=""/>
    <parameters name="contact_groups" documentation=""/>
  </types>
  <types name="nagios_servicegroup" documentation="">
    <parameters name="register" documentation=""/>
    <parameters name="notes_url" documentation=""/>
    <parameters name="alias" documentation=""/>
    <parameters name="servicegroup_members" documentation=""/>
    <parameters name="servicegroup_name" documentation=""/>
    <parameters name="target" documentation=""/>
    <parameters name="use" documentation=""/>
    <parameters name="notes" documentation=""/>
    <parameters name="action_url" documentation=""/>
    <parameters name="members" documentation=""/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="nagios_contact" documentation="">
    <parameters name="host_notification_period" documentation=""/>
    <parameters name="host_notification_commands" documentation=""/>
    <parameters name="service_notification_period" documentation=""/>
    <parameters name="use" documentation=""/>
    <parameters name="address1" documentation=""/>
    <parameters name="address2" documentation=""/>
    <parameters name="address3" documentation=""/>
    <parameters name="contact_name" documentation=""/>
    <parameters name="service_notifications_enabled" documentation=""/>
    <parameters name="contactgroups" documentation=""/>
    <parameters name="ensure" documentation=""/>
    <parameters name="pager" documentation=""/>
    <parameters name="host_notification_options" documentation=""/>
    <parameters name="alias" documentation=""/>
    <parameters name="service_notification_options" documentation=""/>
    <parameters name="register" documentation=""/>
    <parameters name="address6" documentation=""/>
    <parameters name="host_notifications_enabled" documentation=""/>
    <parameters name="address5" documentation=""/>
    <parameters name="service_notification_commands" documentation=""/>
    <parameters name="address4" documentation=""/>
    <parameters name="email" documentation=""/>
    <parameters name="target" documentation=""/>
    <parameters name="retain_nonstatus_information" documentation=""/>
    <parameters name="retain_status_information" documentation=""/>
    <parameters name="can_submit_commands" documentation=""/>
  </types>
  <types name="nagios_contactgroup" documentation="">
    <parameters name="register" documentation=""/>
    <parameters name="contactgroup_members" documentation=""/>
    <parameters name="alias" documentation=""/>
    <parameters name="target" documentation=""/>
    <parameters name="use" documentation=""/>
    <parameters name="members" documentation=""/>
    <parameters name="contactgroup_name" documentation=""/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="nagios_timeperiod" documentation="">
    <parameters name="alias" documentation=""/>
    <parameters name="monday" documentation=""/>
    <parameters name="thursday" documentation=""/>
    <parameters name="use" documentation=""/>
    <parameters name="exclude" documentation=""/>
    <parameters name="register" documentation=""/>
    <parameters name="timeperiod_name" documentation=""/>
    <parameters name="wednesday" documentation=""/>
    <parameters name="sunday" documentation=""/>
    <parameters name="target" documentation=""/>
    <parameters name="saturday" documentation=""/>
    <parameters name="tuesday" documentation=""/>
    <parameters name="friday" documentation=""/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="nagios_command" documentation="">
    <parameters name="command_name" documentation=""/>
    <parameters name="target" documentation=""/>
    <parameters name="command_line" documentation=""/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="nagios_servicedependency" documentation="">
    <parameters name="_naginator_name" documentation=""/>
    <parameters name="inherits_parent" documentation=""/>
    <parameters name="notification_failure_criteria" documentation=""/>
    <parameters name="use" documentation=""/>
    <parameters name="host_name" documentation=""/>
    <parameters name="hostgroup_name" documentation=""/>
    <parameters name="dependent_service_description" documentation=""/>
    <parameters name="register" documentation=""/>
    <parameters name="dependent_host_name" documentation=""/>
    <parameters name="execution_failure_criteria" documentation=""/>
    <parameters name="target" documentation=""/>
    <parameters name="dependency_period" documentation=""/>
    <parameters name="service_description" documentation=""/>
    <parameters name="dependent_hostgroup_name" documentation=""/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="nagios_serviceescalation" documentation="">
    <parameters name="first_notification" documentation=""/>
    <parameters name="escalation_options" documentation=""/>
    <parameters name="_naginator_name" documentation=""/>
    <parameters name="servicegroup_name" documentation=""/>
    <parameters name="use" documentation=""/>
    <parameters name="host_name" documentation=""/>
    <parameters name="hostgroup_name" documentation=""/>
    <parameters name="contacts" documentation=""/>
    <parameters name="register" documentation=""/>
    <parameters name="escalation_period" documentation=""/>
    <parameters name="target" documentation=""/>
    <parameters name="service_description" documentation=""/>
    <parameters name="last_notification" documentation=""/>
    <parameters name="notification_interval" documentation=""/>
    <parameters name="ensure" documentation=""/>
    <parameters name="contact_groups" documentation=""/>
  </types>
  <types name="nagios_hostdependency" documentation="">
    <parameters name="_naginator_name" documentation=""/>
    <parameters name="inherits_parent" documentation=""/>
    <parameters name="notification_failure_criteria" documentation=""/>
    <parameters name="use" documentation=""/>
    <parameters name="host_name" documentation=""/>
    <parameters name="hostgroup_name" documentation=""/>
    <parameters name="register" documentation=""/>
    <parameters name="dependent_host_name" documentation=""/>
    <parameters name="execution_failure_criteria" documentation=""/>
    <parameters name="target" documentation=""/>
    <parameters name="dependency_period" documentation=""/>
    <parameters name="dependent_hostgroup_name" documentation=""/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="nagios_hostescalation" documentation="">
    <parameters name="first_notification" documentation=""/>
    <parameters name="escalation_options" documentation=""/>
    <parameters name="_naginator_name" documentation=""/>
    <parameters name="use" documentation=""/>
    <parameters name="host_name" documentation=""/>
    <parameters name="hostgroup_name" documentation=""/>
    <parameters name="contacts" documentation=""/>
    <parameters name="register" documentation=""/>
    <parameters name="escalation_period" documentation=""/>
    <parameters name="target" documentation=""/>
    <parameters name="last_notification" documentation=""/>
    <parameters name="notification_interval" documentation=""/>
    <parameters name="ensure" documentation=""/>
    <parameters name="contact_groups" documentation=""/>
  </types>
  <types name="nagios_hostextinfo" documentation="">
    <parameters name="statusmap_image" documentation=""/>
    <parameters name="icon_image" documentation=""/>
    <parameters name="vrml_image" documentation=""/>
    <parameters name="use" documentation=""/>
    <parameters name="3d_coords" documentation=""/>
    <parameters name="host_name" documentation=""/>
    <parameters name="notes_url" documentation=""/>
    <parameters name="register" documentation=""/>
    <parameters name="target" documentation=""/>
    <parameters name="2d_coords" documentation=""/>
    <parameters name="icon_image_alt" documentation=""/>
    <parameters name="notes" documentation=""/>
    <parameters name="ensure" documentation=""/>
  </types>
  <types name="nagios_serviceextinfo" documentation="">
    <parameters name="register" documentation=""/>
    <parameters name="notes_url" documentation=""/>
    <parameters name="_naginator_name" documentation=""/>
    <parameters name="icon_image" documentation=""/>
    <parameters name="target" documentation=""/>
    <parameters name="use" documentation=""/>
    <parameters name="icon_image_alt" documentation=""/>
    <parameters name="notes" documentation=""/>
    <parameters name="host_name" documentation=""/>
    <parameters name="service_description" documentation=""/>
    <parameters name="action_url" documentation=""/>
    <parameters name="ensure" documentation=""/>
  </types>
  <typeFragments name="file">
    <parameters name="checksum" documentation="The checksum type to use when checksumming a file.&#xA;&#xA;    The default checksum parameter, if checksums are enabled, is md5."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="content" documentation="Specify the contents of a file as a string.  Newlines, tabs, and&#xA;      spaces can be specified using the escaped syntax (e.g., \n for a newline).  The primary purpose of this parameter is to provide a&#xA;      kind of limited templating::&#xA;&#xA;        define resolve(nameserver1, nameserver2, domain, search) {&#xA;          $str = &quot;search $search&#xA;        domain $domain&#xA;        nameserver $nameserver1&#xA;        nameserver $nameserver2&#xA;        &quot;&#xA;&#xA;          file { &quot;/etc/resolv.conf&quot;:&#xA;            content => $str&#xA;          }&#xA;        }&#xA;&#xA;      This attribute is especially useful when used with&#xA;      `PuppetTemplating templating`:trac:."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="ensure" documentation="Whether to create files that don't currently exist.&#xA;      Possible values are *absent*, *present*, *file*, and *directory*.&#xA;      Specifying `present` will match any form of file existence, and&#xA;      if the file is missing will create an empty file. Specifying&#xA;      `absent` will delete the file (and directory if recurse => true).&#xA;&#xA;      Anything other than those values will be considered to be a symlink.&#xA;      For instance, the following text creates a link:&#xA;&#xA;          # Useful on solaris&#xA;          file { &quot;/etc/inetd.conf&quot;:&#xA;            ensure => &quot;/etc/inet/inetd.conf&quot;&#xA;          }&#xA;&#xA;      You can make relative links:&#xA;&#xA;          # Useful on solaris&#xA;          file { &quot;/etc/inetd.conf&quot;:&#xA;            ensure => &quot;inet/inetd.conf&quot;&#xA;          }&#xA;&#xA;      If you need to make a relative link to a file named the same&#xA;      as one of the valid values, you must prefix it with `./` or&#xA;      something similar.&#xA;&#xA;      You can also make recursive symlinks, which will create a&#xA;      directory structure that maps to the target directory,&#xA;      with directories corresponding to each directory&#xA;      and links corresponding to each file."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="group" documentation="Which group should own the file.  Argument can be either group&#xA;      name or group ID."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="mode" documentation="Mode the file should be.  Currently relatively limited:&#xA;      you must specify the exact mode the file should be.&#xA;&#xA;      Note that when you set the mode of a directory, Puppet always&#xA;      sets the search/traverse (1) bit anywhere the read (4) bit is set.&#xA;      This is almost always what you want: read allows you to list the&#xA;      entries in a directory, and search/traverse allows you to access&#xA;      (read/write/execute) those entries.)  Because of this feature, you&#xA;      can recursively make a directory and all of the files in it&#xA;      world-readable by setting e.g.:&#xA;&#xA;          file { '/some/dir':&#xA;            mode => 644,&#xA;            recurse => true,&#xA;          }&#xA;&#xA;      In this case all of the files underneath `/some/dir` will have&#xA;      mode 644, and all of the directories will have mode 755."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="owner" documentation="To whom the file should belong.  Argument can be user name or&#xA;      user ID."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="seluser" documentation="What the SELinux user component of the context of the file should be.&#xA;      Any valid SELinux user component is accepted.  For example `user_u`.&#xA;      If not specified it defaults to the value returned by matchpathcon for&#xA;      the file, if any exists.  Only valid on systems with SELinux support&#xA;      enabled."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="selrole" documentation="What the SELinux role component of the context of the file should be.&#xA;      Any valid SELinux role component is accepted.  For example `role_r`.&#xA;      If not specified it defaults to the value returned by matchpathcon for&#xA;      the file, if any exists.  Only valid on systems with SELinux support&#xA;      enabled."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="seltype" documentation="What the SELinux type component of the context of the file should be.&#xA;      Any valid SELinux type component is accepted.  For example `tmp_t`.&#xA;      If not specified it defaults to the value returned by matchpathcon for&#xA;      the file, if any exists.  Only valid on systems with SELinux support&#xA;      enabled."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="selrange" documentation="What the SELinux range component of the context of the file should be.&#xA;      Any valid SELinux range component is accepted.  For example `s0` or&#xA;      `SystemHigh`.  If not specified it defaults to the value returned by&#xA;      matchpathcon for the file, if any exists.  Only valid on systems with&#xA;      SELinux support enabled and that have support for MCS (Multi-Category&#xA;      Security)."/>
  </typeFragments>
  <typeFragments name="file">
    <parameters name="source" documentation="Copy a file over the current file.  Uses `checksum` to&#xA;      determine when a file should be copied.  Valid values are either&#xA;      fully qualified paths to files, or URIs.  Currently supported URI&#xA;      types are *puppet* and *file*.&#xA;&#xA;      This is one of the primary mechanisms for getting content into&#xA;      applications that Puppet does not directly support and is very&#xA;      useful for those configuration files that don't change much across&#xA;      sytems.  For instance:&#xA;&#xA;          class sendmail {&#xA;            file { &quot;/etc/mail/sendmail.cf&quot;:&#xA;              source => &quot;puppet://server/modules/module_name/sendmail.cf&quot;&#xA;            }&#xA;          }&#xA;&#xA;      You can also leave out the server name, in which case `puppet agent`&#xA;      will fill in the name of its configuration server and `puppet apply`&#xA;      will use the local filesystem.  This makes it easy to use the same&#xA;      configuration in both local and centralized forms.&#xA;&#xA;      Currently, only the `puppet` scheme is supported for source&#xA;      URL's. Puppet will connect to the file server running on&#xA;      `server` to retrieve the contents of the file. If the&#xA;      `server` part is empty, the behavior of the command-line&#xA;      interpreter (`puppet apply`) and the client demon (`puppet agent`) differs&#xA;      slightly: `apply` will look such a file up on the module path&#xA;      on the local host, whereas `agent` will connect to the&#xA;      puppet server that it received the manifest from.&#xA;&#xA;      See the [fileserver configuration documentation](http://projects.puppetlabs.com/projects/puppet/wiki/File_Serving_Configuration) for information on how to configure&#xA;      and use file services within Puppet.&#xA;&#xA;      If you specify multiple file sources for a file, then the first&#xA;      source that exists will be used.  This allows you to specify&#xA;      what amount to search paths for files:&#xA;&#xA;          file { &quot;/path/to/my/file&quot;:&#xA;            source => [&#xA;              &quot;/modules/nfs/files/file.$host&quot;,&#xA;              &quot;/modules/nfs/files/file.$operatingsystem&quot;,&#xA;              &quot;/modules/nfs/files/file&quot;&#xA;            ]&#xA;          }&#xA;&#xA;      This will use the first found file as the source.&#xA;&#xA;      You cannot currently copy links using this mechanism; set `links`&#xA;      to `follow` if any remote sources are links.&#xA;      "/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="target" documentation="The target for creating a link.  Currently, symlinks are the&#xA;      only type supported."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="type" documentation="A read-only state to check the file type."/>
  </typeFragments>
  <metaType name="Type" documentation="">
    <parameters name="loglevel" documentation="Sets the level that information will be logged.&#xA;      The log levels have the biggest impact when logs are sent to&#xA;      syslog (which is currently the default)."/>
    <parameters name="schedule" documentation="On what schedule the object should be managed.  You must create a&#xA;      schedule object, and then reference the name of that object to use&#xA;      that for your schedule:&#xA;&#xA;          schedule { daily:&#xA;            period => daily,&#xA;            range => &quot;2-4&quot;&#xA;          }&#xA;&#xA;          exec { &quot;/usr/bin/apt-get update&quot;:&#xA;            schedule => daily&#xA;          }&#xA;&#xA;      The creation of the schedule object does not need to appear in the&#xA;      configuration before objects that use it."/>
    <parameters name="subscribe" documentation="One or more objects that this object depends on.  Changes in the&#xA;      subscribed to objects result in the dependent objects being&#xA;      refreshed (e.g., a service will get restarted).  For instance:&#xA;&#xA;          class nagios {&#xA;            file { &quot;/etc/nagios/nagios.conf&quot;:&#xA;              source => &quot;puppet://server/module/nagios.conf&quot;,&#xA;              alias => nagconf # just to make things easier for me&#xA;            }&#xA;            service { nagios:&#xA;              ensure => running,&#xA;              subscribe => File[nagconf]&#xA;            }&#xA;          }&#xA;&#xA;      Currently the `exec`, `mount` and `service` type support&#xA;      refreshing.&#xA;      "/>
    <parameters name="check" documentation="Audit specified attributes of resources over time, and report if any have changed.&#xA;      This parameter has been deprecated in favor of 'audit'."/>
    <parameters name="alias" documentation="Creates an alias for the object.  Puppet uses this internally when you&#xA;      provide a symbolic name:&#xA;&#xA;          file { sshdconfig:&#xA;            path => $operatingsystem ? {&#xA;              solaris => &quot;/usr/local/etc/ssh/sshd_config&quot;,&#xA;              default => &quot;/etc/ssh/sshd_config&quot;&#xA;            },&#xA;            source => &quot;...&quot;&#xA;          }&#xA;&#xA;          service { sshd:&#xA;            subscribe => File[sshdconfig]&#xA;          }&#xA;&#xA;      When you use this feature, the parser sets `sshdconfig` as the name,&#xA;      and the library sets that as an alias for the file so the dependency&#xA;      lookup for `sshd` works.  You can use this parameter yourself,&#xA;      but note that only the library can use these aliases; for instance,&#xA;      the following code will not work:&#xA;&#xA;          file { &quot;/etc/ssh/sshd_config&quot;:&#xA;            owner => root,&#xA;            group => root,&#xA;            alias => sshdconfig&#xA;          }&#xA;&#xA;          file { sshdconfig:&#xA;            mode => 644&#xA;          }&#xA;&#xA;      There's no way here for the Puppet parser to know that these two stanzas&#xA;      should be affecting the same file.&#xA;&#xA;      See the [Language Tutorial](http://docs.puppetlabs.com/guides/language_tutorial.html) for more information.&#xA;&#xA;      "/>
    <parameters name="before" documentation="This parameter is the opposite of **require** -- it guarantees&#xA;      that the specified object is applied later than the specifying&#xA;      object:&#xA;&#xA;          file { &quot;/var/nagios/configuration&quot;:&#xA;            source  => &quot;...&quot;,&#xA;            recurse => true,&#xA;            before => Exec[&quot;nagios-rebuid&quot;]&#xA;          }&#xA;&#xA;          exec { &quot;nagios-rebuild&quot;:&#xA;            command => &quot;/usr/bin/make&quot;,&#xA;            cwd => &quot;/var/nagios/configuration&quot;&#xA;          }&#xA;&#xA;      This will make sure all of the files are up to date before the&#xA;      make command is run."/>
    <parameters name="tag" documentation="Add the specified tags to the associated resource.  While all resources&#xA;      are automatically tagged with as much information as possible&#xA;      (e.g., each class and definition containing the resource), it can&#xA;      be useful to add your own tags to a given resource.&#xA;&#xA;      Tags are currently useful for things like applying a subset of a&#xA;      host's configuration:&#xA;&#xA;          puppet agent --test --tags mytag&#xA;&#xA;      This way, when you're testing a configuration you can run just the&#xA;      portion you're testing."/>
    <parameters name="noop" documentation="Boolean flag indicating whether work should actually&#xA;      be done."/>
    <parameters name="notify" documentation="This parameter is the opposite of **subscribe** -- it sends events&#xA;      to the specified object:&#xA;&#xA;          file { &quot;/etc/sshd_config&quot;:&#xA;            source => &quot;....&quot;,&#xA;            notify => Service[sshd]&#xA;          }&#xA;&#xA;          service { sshd:&#xA;            ensure => running&#xA;          }&#xA;&#xA;      This will restart the sshd service if the sshd config file changes."/>
    <parameters name="audit" documentation="Audit specified attributes of resources over time, and report if any have changed.&#xA;      This attribute can be used to track changes to any resource over time, and can&#xA;      provide an audit trail of every change that happens on any given machine.&#xA;&#xA;      Note that you cannot both audit and manage an attribute - managing it guarantees&#xA;      the value, and any changes already get logged."/>
    <parameters name="require" documentation="One or more objects that this object depends on.&#xA;      This is used purely for guaranteeing that changes to required objects&#xA;      happen before the dependent object.  For instance:&#xA;&#xA;          # Create the destination directory before you copy things down&#xA;          file { &quot;/usr/local/scripts&quot;:&#xA;            ensure => directory&#xA;          }&#xA;&#xA;          file { &quot;/usr/local/scripts/myscript&quot;:&#xA;            source => &quot;puppet://server/module/myscript&quot;,&#xA;            mode => 755,&#xA;            require => File[&quot;/usr/local/scripts&quot;]&#xA;          }&#xA;&#xA;      Multiple dependencies can be specified by providing a comma-seperated list&#xA;      of resources, enclosed in square brackets:&#xA;&#xA;          require => [ File[&quot;/usr/local&quot;], File[&quot;/usr/local/scripts&quot;] ]&#xA;&#xA;      Note that Puppet will autorequire everything that it can, and&#xA;      there are hooks in place so that it's easy for resources to add new&#xA;      ways to autorequire objects, so if you think Puppet could be&#xA;      smarter here, let us know.&#xA;&#xA;      In fact, the above code was redundant -- Puppet will autorequire&#xA;      any parent directories that are being managed; it will&#xA;      automatically realize that the parent directory should be created&#xA;      before the script is pulled down.&#xA;&#xA;      Currently, exec resources will autorequire their CWD (if it is&#xA;      specified) plus any fully qualified paths that appear in the&#xA;      command.   For instance, if you had an `exec` command that ran&#xA;      the `myscript` mentioned above, the above code that pulls the&#xA;      file down would be automatically listed as a requirement to the&#xA;      `exec` code, so that you would always be running againts the&#xA;      most recent version.&#xA;      "/>
    <parameters name="stage" documentation="Which run stage a given resource should reside in.  This just creates&#xA;      a dependency on or from the named milestone.  For instance, saying that&#xA;      this is in the 'bootstrap' stage creates a dependency on the 'bootstrap'&#xA;      milestone.&#xA;&#xA;      By default, all classes get directly added to the&#xA;      'main' stage.  You can create new stages as resources:&#xA;&#xA;          stage { [pre, post]: }&#xA;&#xA;      To order stages, use standard relationships:&#xA;&#xA;          stage { pre: before => Stage[main] }&#xA;&#xA;      Or use the new relationship syntax:&#xA;&#xA;          Stage[pre] -> Stage[main] -> Stage[post]&#xA;&#xA;      Then use the new class parameters to specify a stage:&#xA;&#xA;          class { foo: stage => pre }&#xA;&#xA;      Stages can only be set on classes, not individual resources.  This will&#xA;      fail:&#xA;&#xA;          file { '/foo': stage => pre, ensure => file }&#xA;    "/>
    <parameters name="provider" documentation=""/>
  </metaType>
</pptp:PuppetDistribution>
